{
    "parametrized_description": "An automotive company is comparing NumCatalysts different catalysts. Each catalyst requires amounts of resources as specified by ResourceRequirement and has a conversion rate defined by ConversionRate. Given the TotalResource available for each resource, determine the number of each catalyst to use to maximize the total conversion rate without exceeding the available resources.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumCatalysts": {
            "description": "Number of catalyst types",
            "shape": []
        },
        "NumResources": {
            "description": "Number of resources",
            "shape": []
        },
        "ResourceRequirement": {
            "description": "Amount of resource r required per unit of catalyst c",
            "shape": [
                "NumResources",
                "NumCatalysts"
            ]
        },
        "ConversionRate": {
            "description": "Conversion rate per unit of catalyst c",
            "shape": [
                "NumCatalysts"
            ]
        },
        "TotalResource": {
            "description": "Total amount of resource r available",
            "shape": [
                "NumResources"
            ]
        }
    },
    "variables": {
        "CatalystUsage": {
            "description": "The amount of catalyst c to use",
            "type": "continuous",
            "shape": [
                "NumCatalysts"
            ]
        }
    },
    "constraints": [
        {
            "description": "For each resource, the total amount consumed by all catalysts must not exceed the available TotalResource.",
            "formulation": "\\sum_{c=1}^{\\text{NumCatalysts}} ResourceRequirement_{r,c} \\cdot CatalystUsage_{c} \\leq TotalResource_{r} \\quad \\forall r \\in \\{1, \\dots, \\text{NumResources}\\}",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(ResourceRequirement[r][c] * CatalystUsage[c] for c in range(NumCatalysts)) <= TotalResource[r] for r in range(NumResources)), name=\"ResourceConstraint\")"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total conversion rate, calculated as the sum of ConversionRate multiplied by the number of each catalyst used.",
        "formulation": "Max \\sum_{c=1}^{NumCatalysts} ConversionRate_{c} \\times CatalystUsage_{c}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ConversionRate[c] * CatalystUsage[c] for c in range(NumCatalysts)), GRB.MAXIMIZE)"
        }
    }
}