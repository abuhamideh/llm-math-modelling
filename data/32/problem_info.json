{
    "parametrized_description": "A berry farmer operates NumFarms farms to harvest and deliver NumBerries types of berries in order to fulfill a contract requiring RequiredQuantity of each berry type. Each farm incurs an OperatingCost per day and can harvest and deliver HarvestDelivery amounts of each berry type per day. The farmer aims to minimize the total operating cost while ensuring that the harvested and delivered quantities meet or exceed the RequiredQuantity for each type of berry.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFarms": {
            "description": "Number of farms",
            "shape": []
        },
        "NumBerries": {
            "description": "Number of berry types",
            "shape": []
        },
        "OperatingCost": {
            "description": "Operating cost per day for each farm",
            "shape": [
                "NumFarms"
            ]
        },
        "HarvestDelivery": {
            "description": "Harvest and delivery rate per day for each farm and berry type",
            "shape": [
                "NumFarms",
                "NumBerries"
            ]
        },
        "RequiredQuantity": {
            "description": "Required quantity of each berry type to meet contract",
            "shape": [
                "NumBerries"
            ]
        }
    },
    "variables": {
        "DaysOperated": {
            "description": "The number of days each farm operates",
            "type": "continuous",
            "shape": [
                "NumFarms"
            ]
        }
    },
    "constraints": [
        {
            "description": "For each berry type, the total harvested and delivered quantity across all farms must meet or exceed the RequiredQuantity.",
            "formulation": "\\sum_{f=1}^{\\text{NumFarms}} \\text{HarvestDelivery}_{f, b} \\cdot \\text{DaysOperated}_{f} \\geq \\text{RequiredQuantity}_{b} \\quad \\forall b \\in \\{1, \\dots, \\text{NumBerries}\\}",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(HarvestDelivery[f][b] * DaysOperated[f] for f in range(NumFarms)) >= RequiredQuantity[b] for b in range(NumBerries)))"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total operating cost while ensuring that the harvested and delivered quantities meet or exceed the RequiredQuantity for each type of berry.",
        "formulation": "Min \\sum_{i=1}^{NumFarms} OperatingCost_{i} \\cdot DaysOperated_{i}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(OperatingCost[i] * DaysOperated[i] for i in range(NumFarms)), GRB.MINIMIZE)"
        }
    }
}