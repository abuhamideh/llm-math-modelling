{
    "parametrized_description": "Determine the number of beam bridges and truss bridges to maximize the total mass supported, given that the total number of Popsicle sticks used for beam bridges and truss bridges does not exceed TotalPopsicleSticks, the total units of glue used for beam bridges and truss bridges does not exceed TotalGlue, the number of truss bridges does not exceed MaxTrussBridges, and the number of beam bridges is greater than the number of truss bridges.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TotalPopsicleSticks": {
            "description": "Total number of Popsicle sticks available",
            "shape": []
        },
        "PopsicleSticksPerBeamBridge": {
            "description": "Number of Popsicle sticks required to build one beam bridge",
            "shape": []
        },
        "PopsicleSticksPerTrussBridge": {
            "description": "Number of Popsicle sticks required to build one truss bridge",
            "shape": []
        },
        "TotalGlue": {
            "description": "Total units of glue available",
            "shape": []
        },
        "GluePerBeamBridge": {
            "description": "Units of glue required to build one beam bridge",
            "shape": []
        },
        "GluePerTrussBridge": {
            "description": "Units of glue required to build one truss bridge",
            "shape": []
        },
        "MaxTrussBridges": {
            "description": "Maximum number of truss bridges that can be built",
            "shape": []
        },
        "MassPerBeamBridge": {
            "description": "Mass that one beam bridge can hold",
            "shape": []
        },
        "MassPerTrussBridge": {
            "description": "Mass that one truss bridge can hold",
            "shape": []
        }
    },
    "variables": {
        "BeamBridges": {
            "description": "The number of beam bridges to build",
            "type": "continuous",
            "shape": []
        },
        "TrussBridges": {
            "description": "The number of truss bridges to build",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of Popsicle sticks used for beam bridges and truss bridges does not exceed TotalPopsicleSticks.",
            "formulation": "PopsicleSticksPerBeamBridge \\cdot BeamBridges + PopsicleSticksPerTrussBridge \\cdot TrussBridges \\leq TotalPopsicleSticks",
            "code": {
                "gurobipy": "model.addConstr(PopsicleSticksPerBeamBridge * BeamBridges + PopsicleSticksPerTrussBridge * TrussBridges <= TotalPopsicleSticks)"
            }
        },
        {
            "description": "The total units of glue used for beam bridges and truss bridges does not exceed TotalGlue.",
            "formulation": "GluePerBeamBridge \\times BeamBridges + GluePerTrussBridge \\times TrussBridges \\leq TotalGlue",
            "code": {
                "gurobipy": "model.addConstr(GluePerBeamBridge * BeamBridges + GluePerTrussBridge * TrussBridges <= TotalGlue)"
            }
        },
        {
            "description": "The number of truss bridges does not exceed MaxTrussBridges.",
            "formulation": "TrussBridges \\leq MaxTrussBridges",
            "code": {
                "gurobipy": "model.addConstr(TrussBridges <= MaxTrussBridges)"
            }
        },
        {
            "description": "The number of beam bridges is greater than the number of truss bridges.",
            "formulation": "BeamBridges \\geq TrussBridges + 1",
            "code": {
                "gurobipy": "model.addConstr(BeamBridges >= TrussBridges + 1)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total mass supported, which is the sum of the mass supported by beam bridges and truss bridges.",
        "formulation": "Max \\ MassPerBeamBridge \\cdot BeamBridges + MassPerTrussBridge \\cdot TrussBridges",
        "code": {
            "gurobipy": "model.setObjective(MassPerBeamBridge * BeamBridges + MassPerTrussBridge * TrussBridges, GRB.MAXIMIZE)"
        }
    }
}