{
    "parametrized_description": "A salesman chooses quantities of ramen packs and fries packs to minimize the total sodium intake, which is the sum of SodiumPerRamenPack multiplied by the number of ramen packs and SodiumPerFriesPack multiplied by the number of fries packs. He must ensure that the total calories from ramen and fries are at least MinCalories, the total protein is at least MinProtein, and the number of ramen packs does not exceed MaxRamenMealRatio proportion of the total meals. All quantities of ramen and fries packs must be non-negative.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CaloriesPerRamenPack": {
            "description": "Calories per pack of ramen",
            "shape": []
        },
        "ProteinPerRamenPack": {
            "description": "Protein per pack of ramen",
            "shape": []
        },
        "SodiumPerRamenPack": {
            "description": "Sodium per pack of ramen",
            "shape": []
        },
        "CaloriesPerFriesPack": {
            "description": "Calories per pack of fries",
            "shape": []
        },
        "ProteinPerFriesPack": {
            "description": "Protein per pack of fries",
            "shape": []
        },
        "SodiumPerFriesPack": {
            "description": "Sodium per pack of fries",
            "shape": []
        },
        "MaxRamenMealRatio": {
            "description": "Maximum proportion of meals that can be ramen",
            "shape": []
        },
        "MinCalories": {
            "description": "Minimum calories required",
            "shape": []
        },
        "MinProtein": {
            "description": "Minimum protein required",
            "shape": []
        }
    },
    "variables": {
        "NumRamenPacks": {
            "description": "The number of ramen packs",
            "type": "continuous",
            "shape": []
        },
        "NumFriesPacks": {
            "description": "The number of fries packs",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total calories from ramen and fries must be at least MinCalories.",
            "formulation": "CaloriesPerRamenPack \\cdot NumRamenPacks + CaloriesPerFriesPack \\cdot NumFriesPacks \\geq MinCalories",
            "code": {
                "gurobipy": "model.addConstr(CaloriesPerRamenPack * NumRamenPacks + CaloriesPerFriesPack * NumFriesPacks >= MinCalories)"
            }
        },
        {
            "description": "The total protein from ramen and fries must be at least MinProtein.",
            "formulation": "ProteinPerRamenPack \\cdot NumRamenPacks + ProteinPerFriesPack \\cdot NumFriesPacks \\geq MinProtein",
            "code": {
                "gurobipy": "model.addConstr(ProteinPerRamenPack * NumRamenPacks + ProteinPerFriesPack * NumFriesPacks >= MinProtein)"
            }
        },
        {
            "description": "The number of ramen packs does not exceed MaxRamenMealRatio proportion of the total meals.",
            "formulation": "NumRamenPacks \\leq MaxRamenMealRatio \\cdot (NumRamenPacks + NumFriesPacks)",
            "code": {
                "gurobipy": "model.addConstr(NumRamenPacks <= MaxRamenMealRatio * (NumRamenPacks + NumFriesPacks))"
            }
        },
        {
            "description": "Quantities of ramen and fries packs must be non-negative.",
            "formulation": "NumRamenPacks \\geq 0 \\n NumFriesPacks \\geq 0",
            "code": {
                "gurobipy": "model.addConstr(NumRamenPacks >= 0)\nmodel.addConstr(NumFriesPacks >= 0)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total sodium intake, which is the sum of SodiumPerRamenPack multiplied by the number of ramen packs and SodiumPerFriesPack multiplied by the number of fries packs.",
        "formulation": "Min \\ SodiumPerRamenPack \\times NumRamenPacks + SodiumPerFriesPack \\times NumFriesPacks",
        "code": {
            "gurobipy": "model.setObjective(SodiumPerRamenPack * NumRamenPacks + SodiumPerFriesPack * NumFriesPacks, GRB.MINIMIZE)"
        }
    }
}