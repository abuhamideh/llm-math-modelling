{
    "parametrized_description": "A man selects quantities of alpha and omega brand meal replacement drink bottles to minimize the total sugar intake, calculated as SugarAlpha multiplied by the number of alpha bottles plus SugarOmega multiplied by the number of omega bottles. The selection must ensure that the total protein intake, which is ProteinAlpha times the number of alpha bottles plus ProteinOmega times the number of omega bottles, is at least MinProtein. Additionally, the total calorie intake, defined as CaloriesAlpha times the number of alpha bottles plus CaloriesOmega times the number of omega bottles, must be at least MinCalories. Furthermore, the proportion of omega brand bottles should not exceed MaxOmegaFraction of the total number of bottles consumed.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "ProteinAlpha": {
            "description": "Amount of protein per bottle of the alpha brand drink",
            "shape": []
        },
        "SugarAlpha": {
            "description": "Amount of sugar per bottle of the alpha brand drink",
            "shape": []
        },
        "CaloriesAlpha": {
            "description": "Number of calories per bottle of the alpha brand drink",
            "shape": []
        },
        "ProteinOmega": {
            "description": "Amount of protein per bottle of the omega brand drink",
            "shape": []
        },
        "SugarOmega": {
            "description": "Amount of sugar per bottle of the omega brand drink",
            "shape": []
        },
        "CaloriesOmega": {
            "description": "Number of calories per bottle of the omega brand drink",
            "shape": []
        },
        "MinProtein": {
            "description": "Minimum total protein required",
            "shape": []
        },
        "MinCalories": {
            "description": "Minimum total calories required",
            "shape": []
        },
        "MaxOmegaFraction": {
            "description": "Maximum proportion of omega brand drinks allowed",
            "shape": []
        }
    },
    "variables": {
        "QuantityAlpha": {
            "description": "The number of alpha brand drink bottles",
            "type": "continuous",
            "shape": []
        },
        "QuantityOmega": {
            "description": "The number of omega brand drink bottles",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total protein intake from alpha and omega bottles must be at least MinProtein.",
            "formulation": "ProteinAlpha \\times QuantityAlpha + ProteinOmega \\times QuantityOmega \\geq MinProtein",
            "code": {
                "gurobipy": "model.addConstr(ProteinAlpha * QuantityAlpha + ProteinOmega * QuantityOmega >= MinProtein)"
            }
        },
        {
            "description": "The total calorie intake from alpha and omega bottles must be at least MinCalories.",
            "formulation": "CaloriesAlpha \\times QuantityAlpha + CaloriesOmega \\times QuantityOmega \\geq MinCalories",
            "code": {
                "gurobipy": "model.addConstr(CaloriesAlpha * QuantityAlpha + CaloriesOmega * QuantityOmega >= MinCalories)"
            }
        },
        {
            "description": "The proportion of omega brand bottles must not exceed MaxOmegaFraction of the total number of bottles consumed.",
            "formulation": "QuantityOmega \\leq MaxOmegaFraction \\times (QuantityAlpha + QuantityOmega)",
            "code": {
                "gurobipy": "model.addConstr((1 - MaxOmegaFraction) * QuantityOmega <= MaxOmegaFraction * QuantityAlpha)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total sugar intake, calculated as SugarAlpha multiplied by the number of alpha bottles plus SugarOmega multiplied by the number of omega bottles.",
        "formulation": "Min \\ SugarAlpha \\cdot QuantityAlpha + SugarOmega \\cdot QuantityOmega",
        "code": {
            "gurobipy": "model.setObjective(SugarAlpha * QuantityAlpha + SugarOmega * QuantityOmega, GRB.MINIMIZE)"
        }
    }
}