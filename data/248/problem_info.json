{
    "parametrized_description": "Determine the number of each process to perform in order to maximize the total MetalExtraction, subject to the constraints that the total WaterUsage does not exceed MaxWater and the total PollutionProduction does not exceed MaxPollution.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "MaxWater": {
            "description": "Maximum units of water available",
            "shape": []
        },
        "MaxPollution": {
            "description": "Maximum units of pollution allowed",
            "shape": []
        },
        "MetalExtraction": {
            "description": "Amount of metal extracted per unit of process",
            "shape": [
                "NumProcesses"
            ]
        },
        "WaterUsage": {
            "description": "Amount of water used per unit of process",
            "shape": [
                "NumProcesses"
            ]
        },
        "PollutionProduction": {
            "description": "Amount of pollution produced per unit of process",
            "shape": [
                "NumProcesses"
            ]
        }
    },
    "variables": {
        "ProcessUnit": {
            "description": "The number of units for each process",
            "type": "continuous",
            "shape": [
                "NumProcesses"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total WaterUsage does not exceed MaxWater.",
            "formulation": "\\sum_{i \\in \\text{NumProcesses}} \\text{WaterUsage}_i \\times \\text{ProcessUnit}_i \\leq \\text{MaxWater}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WaterUsage[i] * ProcessUnit[i] for i in range(NumProcesses)) <= MaxWater)"
            }
        },
        {
            "description": "The total PollutionProduction does not exceed MaxPollution.",
            "formulation": "\\sum_{p=1}^{NumProcesses} PollutionProduction_p \\cdot ProcessUnit_p \\leq MaxPollution",
            "code": {
                "gurobipy": "model.addConstr(quicksum(PollutionProduction[p] * ProcessUnit[p] for p in range(NumProcesses)) <= MaxPollution)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total MetalExtraction.",
        "formulation": "Max \\sum_{i=1}^{\\text{NumProcesses}} MetalExtraction_i \\cdot ProcessUnit_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(MetalExtraction[i] * ProcessUnit[i] for i in range(NumProcesses)), GRB.MAXIMIZE)"
        }
    }
}