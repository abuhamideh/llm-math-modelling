{
    "parametrized_description": "A tourism company can purchase sedans and buses. Each sedan seats SedanCapacity tourists per day and produces SedanPollution units of pollution per day. Each bus seats BusCapacity tourists per day and produces BusPollution units of pollution per day. The company is limited to a maximum of MaxPollution units of pollution per day. To be profitable, the company must serve at least MinCustomers customers per day. The goal is to determine the number of sedans and buses to purchase in order to minimize the total number of vehicles needed.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SedanCapacity": {
            "description": "Number of tourists that a sedan can seat per day",
            "shape": []
        },
        "SedanPollution": {
            "description": "Units of pollution resulting from one sedan per day",
            "shape": []
        },
        "BusCapacity": {
            "description": "Number of tourists that a bus can seat per day",
            "shape": []
        },
        "BusPollution": {
            "description": "Units of pollution resulting from one bus per day",
            "shape": []
        },
        "MaxPollution": {
            "description": "Maximum units of pollution allowed per day",
            "shape": []
        },
        "MinCustomers": {
            "description": "Minimum number of customers required per day",
            "shape": []
        }
    },
    "variables": {
        "NumberOfSedans": {
            "description": "The number of sedans used per day",
            "type": "continuous",
            "shape": []
        },
        "NumberOfBuses": {
            "description": "The number of buses used per day",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total pollution produced by the vehicles cannot exceed MaxPollution units per day. This is calculated as SedanPollution multiplied by the number of sedans plus BusPollution multiplied by the number of buses.",
            "formulation": "SedanPollution \\cdot NumberOfSedans + BusPollution \\cdot NumberOfBuses \\leq MaxPollution",
            "code": {
                "gurobipy": "model.addConstr(SedanPollution * NumberOfSedans + BusPollution * NumberOfBuses <= MaxPollution)"
            }
        },
        {
            "description": "The company must serve at least MinCustomers customers per day. This is achieved by ensuring that SedanCapacity multiplied by the number of sedans plus BusCapacity multiplied by the number of buses is at least MinCustomers.",
            "formulation": "SedanCapacity \\times NumberOfSedans + BusCapacity \\times NumberOfBuses \\geq MinCustomers",
            "code": {
                "gurobipy": "model.addConstr(SedanCapacity * NumberOfSedans + BusCapacity * NumberOfBuses >= MinCustomers)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of vehicles needed, which is the sum of the number of sedans and the number of buses purchased.",
        "formulation": "Min \\left( NumberOfSedans + NumberOfBuses \\right)",
        "code": {
            "gurobipy": "model.setObjective(NumberOfSedans + NumberOfBuses, GRB.MINIMIZE)"
        }
    }
}