{
    "parametrized_description": "A pharmacy produces NumProducts different products using NumMachines different machines. Each machine m can produce ProductionRate[m, p] amount of product p per hour. Additionally, machine m consumes WaterUsage[m] amount of distilled water per hour. The pharmacy has TotalWaterAvailable amount of distilled water available. The pharmacy needs to produce at least RequiredProduct[p] amount of each product p. The objective is to determine the number of hours each machine should be operated to minimize the total time required.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumMachines": {
            "description": "Number of machines",
            "shape": []
        },
        "NumProducts": {
            "description": "Number of products",
            "shape": []
        },
        "ProductionRate": {
            "description": "Amount of product p produced per hour by machine m",
            "shape": [
                "NumMachines",
                "NumProducts"
            ]
        },
        "WaterUsage": {
            "description": "Amount of distilled water consumed per hour by machine m",
            "shape": [
                "NumMachines"
            ]
        },
        "TotalWaterAvailable": {
            "description": "Total amount of distilled water available",
            "shape": []
        },
        "RequiredProduct": {
            "description": "Minimum required amount of product p",
            "shape": [
                "NumProducts"
            ]
        }
    },
    "variables": {
        "OperatingTime": {
            "description": "The operating time for machine m",
            "type": "continuous",
            "shape": [
                "NumMachines"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total distilled water consumed by all machines cannot exceed TotalWaterAvailable.",
            "formulation": "\\sum_{m=1}^{\\text{NumMachines}} \\text{WaterUsage}_{m} \\cdot \\text{OperatingTime}_{m} \\leq \\text{TotalWaterAvailable}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WaterUsage[m] * OperatingTime[m] for m in range(NumMachines)) <= TotalWaterAvailable)"
            }
        },
        {
            "description": "For each product p, the total production must be at least RequiredProduct[p].",
            "formulation": "\\sum_{m=1}^{NumMachines} ProductionRate_{m,p} \\cdot OperatingTime_{m} \\geq RequiredProduct_{p} \\quad \\forall p",
            "code": {
                "gurobipy": "for p in range(NumProducts):\n    model.addConstr(quicksum(ProductionRate[m][p] * OperatingTime[m] for m in range(NumMachines)) >= RequiredProduct[p], name=f\"ProdRequirement_{p}\")"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total operating hours of all machines while meeting the minimum production requirements for each product and adhering to the total available distilled water.",
        "formulation": "Min \\sum_{m=1}^{NumMachines} OperatingTime_{m}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(OperatingTime[m] for m in range(NumMachines)), GRB.MINIMIZE)"
        }
    }
}