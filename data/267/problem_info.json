{
    "parametrized_description": "A manufacturer produces two types of keyboards: mechanical and standard. The number of mechanical keyboards should be MechanicalToStandardRatio times the number of standard keyboards. Each mechanical keyboard requires PlasticCostMechanical units of plastic and SolderCostMechanical units of solder, while each standard keyboard requires PlasticCostStandard units of plastic and SolderCostStandard units of solder. The total available plastic is TotalPlasticAvailable units and the total available solder is TotalSolderAvailable units. Additionally, the production of standard keyboards must be at least MinimumStandardKeyboards units. The objective is to maximize the total number of keyboards produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumProductTypes": {
            "description": "Number of different product types",
            "shape": []
        },
        "PlasticCostMechanical": {
            "description": "Units of plastic required to produce one mechanical keyboard",
            "shape": []
        },
        "PlasticCostStandard": {
            "description": "Units of plastic required to produce one standard keyboard",
            "shape": []
        },
        "SolderCostMechanical": {
            "description": "Units of solder required to produce one mechanical keyboard",
            "shape": []
        },
        "SolderCostStandard": {
            "description": "Units of solder required to produce one standard keyboard",
            "shape": []
        },
        "MechanicalToStandardRatio": {
            "description": "Desired ratio of mechanical keyboards to standard keyboards",
            "shape": []
        },
        "MinimumStandardKeyboards": {
            "description": "Minimum number of standard keyboards to be produced",
            "shape": []
        },
        "TotalPlasticAvailable": {
            "description": "Total units of plastic available",
            "shape": []
        },
        "TotalSolderAvailable": {
            "description": "Total units of solder available",
            "shape": []
        }
    },
    "variables": {
        "NumberMechanicalKeyboards": {
            "description": "The number of mechanical keyboards",
            "type": "continuous",
            "shape": []
        },
        "NumberStandardKeyboards": {
            "description": "The number of standard keyboards",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of mechanical keyboards is equal to MechanicalToStandardRatio times the number of standard keyboards.",
            "formulation": "NumberMechanicalKeyboards = MechanicalToStandardRatio \\times NumberStandardKeyboards",
            "code": {
                "gurobipy": "model.addConstr(NumberMechanicalKeyboards == MechanicalToStandardRatio * NumberStandardKeyboards)"
            }
        },
        {
            "description": "PlasticCostMechanical multiplied by the number of mechanical keyboards plus PlasticCostStandard multiplied by the number of standard keyboards does not exceed TotalPlasticAvailable units of plastic.",
            "formulation": "PlasticCostMechanical \\cdot NumberMechanicalKeyboards + PlasticCostStandard \\cdot NumberStandardKeyboards \\leq TotalPlasticAvailable",
            "code": {
                "gurobipy": "model.addConstr(PlasticCostMechanical * NumberMechanicalKeyboards + PlasticCostStandard * NumberStandardKeyboards <= TotalPlasticAvailable)"
            }
        },
        {
            "description": "SolderCostMechanical multiplied by the number of mechanical keyboards plus SolderCostStandard multiplied by the number of standard keyboards does not exceed TotalSolderAvailable units of solder.",
            "formulation": "SolderCostMechanical \\cdot NumberMechanicalKeyboards + SolderCostStandard \\cdot NumberStandardKeyboards \\leq TotalSolderAvailable",
            "code": {
                "gurobipy": "model.addConstr(SolderCostMechanical * NumberMechanicalKeyboards + SolderCostStandard * NumberStandardKeyboards <= TotalSolderAvailable)"
            }
        },
        {
            "description": "The number of standard keyboards produced is at least MinimumStandardKeyboards.",
            "formulation": "NumberStandardKeyboards \\geq MinimumStandardKeyboards",
            "code": {
                "gurobipy": "model.addConstr(NumberStandardKeyboards >= MinimumStandardKeyboards)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of keyboards produced.",
        "formulation": "Max\\left(NumberMechanicalKeyboards + NumberStandardKeyboards\\right)",
        "code": {
            "gurobipy": "model.setObjective(NumberMechanicalKeyboards + NumberStandardKeyboards, GRB.MAXIMIZE)"
        }
    }
}