{
    "parametrized_description": "A sandwich company can open NumStoreTypes types of stores. Each store type produces SandwichesPerStoreType sandwiches per day and requires EmployeesPerStoreType employees to operate. The company must produce at least MinimumSandwiches sandwiches per day and has at most MaximumEmployees employees available. Determine the number of each type of store to minimize the total number of stores.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumStoreTypes": {
            "description": "Number of types of stores available",
            "shape": []
        },
        "SandwichesPerStoreType": {
            "description": "Number of sandwiches produced per store type per day",
            "shape": [
                "NumStoreTypes"
            ]
        },
        "EmployeesPerStoreType": {
            "description": "Number of employees required per store type",
            "shape": [
                "NumStoreTypes"
            ]
        },
        "MinimumSandwiches": {
            "description": "Minimum number of sandwiches to be produced per day",
            "shape": []
        },
        "MaximumEmployees": {
            "description": "Maximum number of employees available",
            "shape": []
        }
    },
    "variables": {
        "NumberStore": {
            "description": "The number of stores for each store type",
            "type": "continuous",
            "shape": [
                "NumStoreTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total number of sandwiches produced per day must be at least MinimumSandwiches. This is calculated by summing SandwichesPerStoreType multiplied by the number of each store type.",
            "formulation": "\\sum_{i=1}^{NumStoreTypes} SandwichesPerStoreType_i \\cdot NumberStore_i \\geq MinimumSandwiches",
            "code": {
                "gurobipy": "model.addConstr(quicksum(SandwichesPerStoreType[i] * NumberStore[i] for i in range(NumStoreTypes)) >= MinimumSandwiches)"
            }
        },
        {
            "description": "The total number of employees required must not exceed MaximumEmployees. This is calculated by summing EmployeesPerStoreType multiplied by the number of each store type.",
            "formulation": "\\sum_{i=1}^{\\text{NumStoreTypes}} \\text{EmployeesPerStoreType}_i \\times \\text{NumberStore}_i \\leq \\text{MaximumEmployees}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(EmployeesPerStoreType[i] * NumberStore[i] for i in range(NumStoreTypes)) <= MaximumEmployees)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of stores, which is the sum of the number of each type of store.",
        "formulation": "Min \\sum_{t=1}^{NumStoreTypes} NumberStore_t",
        "code": {
            "gurobipy": "model.setObjective(quicksum(NumberStore[t] for t in range(NumStoreTypes)), GRB.MINIMIZE)"
        }
    }
}