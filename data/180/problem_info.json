{
    "parametrized_description": "A grape farmer uses small and large crates to transport grapes. Each small crate holds SmallCrateCapacity grapes, and each large crate holds LargeCrateCapacity grapes. The number of small crates used must be at least MinimumSmallToLargeRatio times the number of large crates. The farmer can use up to MaxSmallCrates small crates and up to MaxLargeCrates large crates. Additionally, the truck can carry up to MaxTotalCrates crates in total, and at least MinLargeCrates large crates must be used. The objective is to determine the number of small and large crates to maximize the total number of grapes transported.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallCrateCapacity": {
            "description": "Number of grapes a small crate can hold",
            "shape": []
        },
        "LargeCrateCapacity": {
            "description": "Number of grapes a large crate can hold",
            "shape": []
        },
        "MinimumSmallToLargeRatio": {
            "description": "Minimum ratio of small crates to large crates",
            "shape": []
        },
        "MaxSmallCrates": {
            "description": "Maximum number of small crates available",
            "shape": []
        },
        "MaxLargeCrates": {
            "description": "Maximum number of large crates available",
            "shape": []
        },
        "MaxTotalCrates": {
            "description": "Maximum number of crates the truck can carry",
            "shape": []
        },
        "MinLargeCrates": {
            "description": "Minimum number of large crates to be used",
            "shape": []
        }
    },
    "variables": {
        "NumSmallCrates": {
            "description": "The number of small crates used",
            "type": "continuous",
            "shape": []
        },
        "NumLargeCrates": {
            "description": "The number of large crates used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of small crates used must be at least MinimumSmallToLargeRatio times the number of large crates.",
            "formulation": "NumSmallCrates \\geq MinimumSmallToLargeRatio \\times NumLargeCrates",
            "code": {
                "gurobipy": "model.addConstr(NumSmallCrates >= MinimumSmallToLargeRatio * NumLargeCrates)"
            }
        },
        {
            "description": "The number of small crates used cannot exceed MaxSmallCrates.",
            "formulation": "NumSmallCrates \\leq MaxSmallCrates",
            "code": {
                "gurobipy": "model.addConstr(NumSmallCrates <= MaxSmallCrates)"
            }
        },
        {
            "description": "The number of large crates used cannot exceed MaxLargeCrates.",
            "formulation": "NumLargeCrates \\leq MaxLargeCrates",
            "code": {
                "gurobipy": "model.addConstr(NumLargeCrates <= MaxLargeCrates)"
            }
        },
        {
            "description": "The total number of crates used cannot exceed MaxTotalCrates.",
            "formulation": "NumSmallCrates + NumLargeCrates \\leq MaxTotalCrates",
            "code": {
                "gurobipy": "model.addConstr(NumSmallCrates + NumLargeCrates <= MaxTotalCrates)"
            }
        },
        {
            "description": "At least MinLargeCrates large crates must be used.",
            "formulation": "NumLargeCrates \\geq MinLargeCrates",
            "code": {
                "gurobipy": "model.addConstr(NumLargeCrates >= MinLargeCrates)"
            }
        }
    ],
    "objective": {
        "description": "The total number of grapes transported is the sum of the grapes in small crates and large crates. The objective is to maximize the total number of grapes transported.",
        "formulation": "Max (NumSmallCrates \\times SmallCrateCapacity + NumLargeCrates \\times LargeCrateCapacity)",
        "code": {
            "gurobipy": "model.setObjective(NumSmallCrates * SmallCrateCapacity + NumLargeCrates * LargeCrateCapacity, GRB.MAXIMIZE)"
        }
    }
}