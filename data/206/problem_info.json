{
    "parametrized_description": "A bakery has BatterAvailable grams of batter and MilkAvailable grams of milk to produce NumProducts different products. Each product requires a specific amount of batter as defined by BatterPerProduct and a specific amount of milk as defined by MilkPerProduct. The profit earned from each product is given by ProfitPerProduct. The bakery aims to determine the number of each product to produce in order to maximize total profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "BatterAvailable": {
            "description": "Total amount of batter available (in grams)",
            "shape": []
        },
        "MilkAvailable": {
            "description": "Total amount of milk available (in grams)",
            "shape": []
        },
        "NumProducts": {
            "description": "Number of different products",
            "shape": []
        },
        "BatterPerProduct": {
            "description": "Amount of batter required to produce one unit of each product",
            "shape": [
                "NumProducts"
            ]
        },
        "MilkPerProduct": {
            "description": "Amount of milk required to produce one unit of each product",
            "shape": [
                "NumProducts"
            ]
        },
        "ProfitPerProduct": {
            "description": "Profit per unit of each product",
            "shape": [
                "NumProducts"
            ]
        }
    },
    "variables": {
        "UnitsToProduce": {
            "description": "The number of units to produce for each product",
            "type": "continuous",
            "shape": [
                "NumProducts"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total batter used to produce all products cannot exceed BatterAvailable grams.",
            "formulation": "\\sum_{i=1}^{\\text{NumProducts}} \\text{BatterPerProduct}_i \\times \\text{UnitsToProduce}_i \\leq \\text{BatterAvailable}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(BatterPerProduct[i] * UnitsToProduce[i] for i in range(NumProducts)) <= BatterAvailable)"
            }
        },
        {
            "description": "The total milk used to produce all products cannot exceed MilkAvailable grams.",
            "formulation": "\\sum_{i=1}^{NumProducts} MilkPerProduct_i \\cdot UnitsToProduce_i \\leq MilkAvailable",
            "code": {
                "gurobipy": "model.addConstr(quicksum(MilkPerProduct[i] * UnitsToProduce[i] for i in range(NumProducts)) <= MilkAvailable)"
            }
        }
    ],
    "objective": {
        "description": "Total profit is the sum of the profits from all products produced. The objective is to maximize the total profit.",
        "formulation": "Max \\sum_{i=1}^{\\text{NumProducts}} \\text{ProfitPerProduct}_i \\times \\text{UnitsToProduce}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(UnitsToProduce[i] * ProfitPerProduct[i] for i in range(NumProducts)), GRB.MAXIMIZE)"
        }
    }
}