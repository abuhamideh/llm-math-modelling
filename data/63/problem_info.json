{
    "parametrized_description": "A shipping company can purchase RegularVans and HybridVans to make deliveries. Each RegularVan delivers PackagesDeliveredRegular packages per day and produces PollutantsRegular units of pollutants, while each HybridVan delivers PackagesDeliveredHybrid packages per day and produces PollutantsHybrid units of pollutants. The company must deliver at least MinPackages packages per day and ensure that total pollutants do not exceed MaxPollutants units per day. The objective is to determine the number of RegularVans and HybridVans to purchase in order to minimize the total number of vans used.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "PackagesDeliveredRegular": {
            "description": "Number of packages a regular van can deliver per day",
            "shape": []
        },
        "PackagesDeliveredHybrid": {
            "description": "Number of packages a hybrid van can deliver per day",
            "shape": []
        },
        "PollutantsRegular": {
            "description": "Number of pollutant units produced by a regular van per day",
            "shape": []
        },
        "PollutantsHybrid": {
            "description": "Number of pollutant units produced by a hybrid van per day",
            "shape": []
        },
        "MaxPollutants": {
            "description": "Maximum allowed pollutant units per day",
            "shape": []
        },
        "MinPackages": {
            "description": "Minimum required number of packages per day",
            "shape": []
        }
    },
    "variables": {
        "RegularVans": {
            "description": "The number of regular vans used per day",
            "type": "continuous",
            "shape": []
        },
        "HybridVans": {
            "description": "The number of hybrid vans used per day",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The company must deliver at least MinPackages packages per day.",
            "formulation": "RegularVans \\times PackagesDeliveredRegular + HybridVans \\times PackagesDeliveredHybrid \\geq MinPackages",
            "code": {
                "gurobipy": "model.addConstr(RegularVans * PackagesDeliveredRegular + HybridVans * PackagesDeliveredHybrid >= MinPackages)"
            }
        },
        {
            "description": "Ensure that total pollutants do not exceed MaxPollutants units per day.",
            "formulation": "PollutantsRegular \\cdot RegularVans + PollutantsHybrid \\cdot HybridVans \\leq MaxPollutants",
            "code": {
                "gurobipy": "model.addConstr(PollutantsRegular * RegularVans + PollutantsHybrid * HybridVans <= MaxPollutants)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of vans used.",
        "formulation": "\\min \\, RegularVans + HybridVans",
        "code": {
            "gurobipy": "model.setObjective(RegularVans + HybridVans, GRB.MINIMIZE)"
        }
    }
}