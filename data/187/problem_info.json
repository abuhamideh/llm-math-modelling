{
    "parametrized_description": "A fishing boat transports fish to shore using canoes and diesel boats. Each canoe can carry CanoeCapacity fish, and each diesel boat can carry DieselBoatCapacity fish. The number of canoes used must be at least CanoeToBoatRatio times the number of diesel boats used. To transport at least MinFish fish, minimize the total number of canoes and diesel boats required.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CanoeCapacity": {
            "description": "Number of fish that a canoe can carry",
            "shape": []
        },
        "DieselBoatCapacity": {
            "description": "Number of fish that a small diesel boat can carry",
            "shape": []
        },
        "CanoeToBoatRatio": {
            "description": "Minimum ratio of canoes to diesel boats",
            "shape": []
        },
        "MinFish": {
            "description": "Minimum number of fish to be transported to shore",
            "shape": []
        }
    },
    "variables": {
        "NumberOfCanoes": {
            "description": "The number of canoes used",
            "type": "continuous",
            "shape": [
                "integer"
            ]
        },
        "NumberOfDieselBoats": {
            "description": "The number of diesel boats used",
            "type": "continuous",
            "shape": [
                "integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "Each canoe can carry CanoeCapacity fish and each diesel boat can carry DieselBoatCapacity fish. The total number of fish transported must be at least MinFish.",
            "formulation": "CanoeCapacity \\cdot NumberOfCanoes + DieselBoatCapacity \\cdot NumberOfDieselBoats \\geq MinFish",
            "code": {
                "gurobipy": "model.addConstr(CanoeCapacity * NumberOfCanoes + DieselBoatCapacity * NumberOfDieselBoats >= MinFish)"
            }
        },
        {
            "description": "The number of canoes used must be at least CanoeToBoatRatio times the number of diesel boats used.",
            "formulation": "NumberOfCanoes \\geq CanoeToBoatRatio \\times NumberOfDieselBoats",
            "code": {
                "gurobipy": "model.addConstr(NumberOfCanoes >= CanoeToBoatRatio * NumberOfDieselBoats)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of canoes and diesel boats required.",
        "formulation": "Min \\left( NumberOfCanoes + NumberOfDieselBoats \\right)",
        "code": {
            "gurobipy": "model.setObjective(NumberOfCanoes + NumberOfDieselBoats, GRB.MINIMIZE)"
        }
    }
}