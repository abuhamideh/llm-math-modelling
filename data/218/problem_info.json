{
    "parametrized_description": "A ski resort needs to install two types of ski lifts: densely-seated lifts and loosely-seated lifts. The densely-seated ski lift transports GuestsPerMinuteDenselySeatedLift guests per minute and consumes ElectricityPerDenselySeatedLift units of electricity. The loosely-seated ski lift transports GuestsPerMinuteLooselySeatedLift guests per minute and consumes ElectricityPerLooselySeatedLift units of electricity. The resort must install at least MinimumLooselySeatedLifts loosely-seated ski lifts. To achieve a minimum of MinimumGuestsPerMinute guests per minute while not exceeding TotalElectricityAvailable units of electricity, determine the number of each type of ski lift to install in order to minimize the total number of ski lifts.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "GuestsPerMinuteDenselySeatedLift": {
            "description": "Number of guests transported per minute by a densely-seated ski lift",
            "shape": []
        },
        "GuestsPerMinuteLooselySeatedLift": {
            "description": "Number of guests transported per minute by a loosely-seated ski lift",
            "shape": []
        },
        "ElectricityPerDenselySeatedLift": {
            "description": "Electricity units used by a densely-seated ski lift",
            "shape": []
        },
        "ElectricityPerLooselySeatedLift": {
            "description": "Electricity units used by a loosely-seated ski lift",
            "shape": []
        },
        "MinimumLooselySeatedLifts": {
            "description": "Minimum number of loosely-seated ski lifts required",
            "shape": []
        },
        "MinimumGuestsPerMinute": {
            "description": "Minimum number of guests per minute required for profit",
            "shape": []
        },
        "TotalElectricityAvailable": {
            "description": "Total electricity units available",
            "shape": []
        }
    },
    "variables": {
        "LooselySeatedLift": {
            "description": "The number of loosely-seated ski lifts",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "DenselySeatedLift": {
            "description": "The number of densely-seated ski lifts",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "At least MinimumLooselySeatedLifts loosely-seated ski lifts must be installed.",
            "formulation": "LooselySeatedLift \\geq MinimumLooselySeatedLifts",
            "code": {
                "gurobipy": "model.addConstr(LooselySeatedLift >= MinimumLooselySeatedLifts)"
            }
        },
        {
            "description": "The total number of guests per minute must be at least MinimumGuestsPerMinute.",
            "formulation": "GuestsPerMinuteDenselySeatedLift \\times DenselySeatedLift + GuestsPerMinuteLooselySeatedLift \\times LooselySeatedLift \\geq MinimumGuestsPerMinute",
            "code": {
                "gurobipy": "model.addConstr(\n    GuestsPerMinuteDenselySeatedLift * DenselySeatedLift +\n    GuestsPerMinuteLooselySeatedLift * LooselySeatedLift >= MinimumGuestsPerMinute\n)"
            }
        },
        {
            "description": "The total electricity consumption must not exceed TotalElectricityAvailable units.",
            "formulation": "DenselySeatedLift \\cdot ElectricityPerDenselySeatedLift + LooselySeatedLift \\cdot ElectricityPerLooselySeatedLift \\leq TotalElectricityAvailable",
            "code": {
                "gurobipy": "model.addConstr(DenselySeatedLift * ElectricityPerDenselySeatedLift + LooselySeatedLift * ElectricityPerLooselySeatedLift <= TotalElectricityAvailable)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of ski lifts installed.",
        "formulation": "Min \\left( LooselySeatedLift + DenselySeatedLift \\right)",
        "code": {
            "gurobipy": "model.setObjective(LooselySeatedLift + DenselySeatedLift, GRB.MINIMIZE)"
        }
    }
}