{
    "parametrized_description": "Determine the number of boat trips and canoe trips to minimize the total transportation time, where each boat trip carries BoatCapacity ducks and takes BoatTripTime minutes, and each canoe trip carries CanoeCapacity ducks and takes CanoeTripTime minutes. The number of boat trips must not exceed MaxBoatTrips, at least MinCanoeTripFraction of all trips must be canoe trips, and the total number of ducks transported must be at least MinDucks.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "BoatCapacity": {
            "description": "Number of ducks a boat can carry per trip",
            "shape": []
        },
        "CanoeCapacity": {
            "description": "Number of ducks a canoe can carry per trip",
            "shape": []
        },
        "BoatTripTime": {
            "description": "Time in minutes per boat trip",
            "shape": []
        },
        "CanoeTripTime": {
            "description": "Time in minutes per canoe trip",
            "shape": []
        },
        "MaxBoatTrips": {
            "description": "Maximum number of boat trips allowed",
            "shape": []
        },
        "MinCanoeTripFraction": {
            "description": "Minimum fraction of trips that must be by canoe",
            "shape": []
        },
        "MinDucks": {
            "description": "Minimum number of ducks to be transported to shore",
            "shape": []
        }
    },
    "variables": {
        "BoatTrips": {
            "description": "The number of boat trips",
            "type": "continuous",
            "shape": [
                "NonNegative",
                "Integer"
            ]
        },
        "CanoeTrips": {
            "description": "The number of canoe trips",
            "type": "continuous",
            "shape": [
                "NonNegative",
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The number of boat trips must not exceed MaxBoatTrips.",
            "formulation": "BoatTrips \\leq MaxBoatTrips",
            "code": {
                "gurobipy": "model.addConstr(BoatTrips <= MaxBoatTrips)"
            }
        },
        {
            "description": "At least MinCanoeTripFraction of all trips must be canoe trips.",
            "formulation": "CanoeTrips \\geq MinCanoeTripFraction \\times (BoatTrips + CanoeTrips)",
            "code": {
                "gurobipy": "model.addConstr(CanoeTrips >= MinCanoeTripFraction * (BoatTrips + CanoeTrips))"
            }
        },
        {
            "description": "The total number of ducks transported must be at least MinDucks.",
            "formulation": "BoatTrips \\cdot BoatCapacity + CanoeTrips \\cdot CanoeCapacity \\geq MinDucks",
            "code": {
                "gurobipy": "model.addConstr(BoatTrips * BoatCapacity + CanoeTrips * CanoeCapacity >= MinDucks)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total transportation time, which is calculated as (Number of boat trips \u00d7 BoatTripTime) + (Number of canoe trips \u00d7 CanoeTripTime).",
        "formulation": "Minimize \\; BoatTrips \\cdot BoatTripTime + CanoeTrips \\cdot CanoeTripTime",
        "code": {
            "gurobipy": "model.setObjective(BoatTrips * BoatTripTime + CanoeTrips * CanoeTripTime, GRB.MINIMIZE)"
        }
    }
}