{
    "parametrized_description": "A scientist is conducting NumExperiments different experiments to produce electricity. Each experiment i produces ElectricityProduced[i] units of electricity and requires specific amounts of NumResources types of resources as defined by ResourceRequired[j][i]. The laboratory has ResourceAvailable[j] units of each resource available. The scientist aims to determine the number of each experiment to conduct in order to maximize the total electricity produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumExperiments": {
            "description": "Number of experiments",
            "shape": []
        },
        "NumResources": {
            "description": "Number of resource types",
            "shape": []
        },
        "ResourceAvailable": {
            "description": "Amount of resource j available",
            "shape": [
                "NumResources"
            ]
        },
        "ResourceRequired": {
            "description": "Amount of resource j required for experiment i",
            "shape": [
                "NumResources",
                "NumExperiments"
            ]
        },
        "ElectricityProduced": {
            "description": "Amount of electricity produced by experiment i",
            "shape": [
                "NumExperiments"
            ]
        }
    },
    "variables": {
        "ConductExperiment": {
            "description": "The number of times each experiment is conducted",
            "type": "continuous",
            "shape": [
                "NumExperiments"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total metal required for all experiments does not exceed the available metal.",
            "formulation": "\\sum_{i=1}^{NumExperiments} ResourceRequired_{\\text{Metal},i} \\cdot ConductExperiment_i \\leq ResourceAvailable_{\\text{Metal}}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ResourceRequired[0][i] * ConductExperiment[i] for i in range(NumExperiments)) <= ResourceAvailable[0])"
            }
        },
        {
            "description": "The total acid required for all experiments does not exceed the available acid.",
            "formulation": "\\sum_{i=1}^{\\text{NumExperiments}} \\text{ResourceRequired}_{\\text{acid}, i} \\cdot \\text{ConductExperiment}_i \\leq \\text{ResourceAvailable}_{\\text{acid}}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ResourceRequired['acid'][i] * ConductExperiment[i] for i in range(NumExperiments)) <= ResourceAvailable['acid'])"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total electricity produced by conducting the experiments.",
        "formulation": "Max \\sum_{i=1}^{NumExperiments} ConductExperiment_{i} \\times ElectricityProduced_{i}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ConductExperiment[i] * ElectricityProduced[i] for i in range(NumExperiments)), GRB.MAXIMIZE)"
        }
    }
}