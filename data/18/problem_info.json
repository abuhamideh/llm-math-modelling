{
    "parametrized_description": "An electronics store seeks to determine the optimal quantities of two types of products to maintain in inventory to maximize profit. Each unit of the first product yields ProfitPhone in profit, while each unit of the second product yields ProfitLaptop in profit. The first product requires SpacePhone square feet of floor space, and the second product requires SpaceLaptop square feet of floor space. The store has a total of TotalSpace square feet of available floor space. The inventory is limited to these two products only, with a corporate requirement that at least MinLaptopPercentage of all stocked products must be the second product. Additionally, each unit of the first product costs CostPhone and each unit of the second product costs CostLaptop, with the total expenditure not exceeding MaxBudget. Formulate a linear programming model to maximize the store's profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "ProfitPhone": {
            "description": "Profit earned per phone",
            "shape": []
        },
        "ProfitLaptop": {
            "description": "Profit earned per laptop",
            "shape": []
        },
        "SpacePhone": {
            "description": "Floor space required per phone (sq ft)",
            "shape": []
        },
        "SpaceLaptop": {
            "description": "Floor space required per laptop (sq ft)",
            "shape": []
        },
        "TotalSpace": {
            "description": "Total available floor space (sq ft)",
            "shape": []
        },
        "MinLaptopPercentage": {
            "description": "Minimum percentage of laptops required in inventory",
            "shape": []
        },
        "CostPhone": {
            "description": "Cost per phone",
            "shape": []
        },
        "CostLaptop": {
            "description": "Cost per laptop",
            "shape": []
        },
        "MaxBudget": {
            "description": "Maximum total budget",
            "shape": []
        }
    },
    "variables": {
        "NumberOfPhones": {
            "description": "The number of phones",
            "type": "continuous",
            "shape": [
                "NonNegative"
            ]
        },
        "NumberOfLaptops": {
            "description": "The number of laptops",
            "type": "continuous",
            "shape": [
                "NonNegative"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total floor space used by phones and laptops must not exceed TotalSpace square feet.",
            "formulation": "NumberOfPhones \\cdot SpacePhone + NumberOfLaptops \\cdot SpaceLaptop \\leq TotalSpace",
            "code": {
                "gurobipy": "model.addConstr(NumberOfPhones * SpacePhone + NumberOfLaptops * SpaceLaptop <= TotalSpace)"
            }
        },
        {
            "description": "The total cost of phones and laptops must not exceed MaxBudget.",
            "formulation": "CostPhone \\times NumberOfPhones + CostLaptop \\times NumberOfLaptops \\leq MaxBudget",
            "code": {
                "gurobipy": "model.addConstr(CostPhone * NumberOfPhones + CostLaptop * NumberOfLaptops <= MaxBudget)"
            }
        },
        {
            "description": "The number of laptops must be at least MinLaptopPercentage of the total inventory of phones and laptops.",
            "formulation": "NumberOfLaptops \\geq MinLaptopPercentage \\times (NumberOfPhones + NumberOfLaptops)",
            "code": {
                "gurobipy": "model.addConstr(NumberOfLaptops >= MinLaptopPercentage * (NumberOfPhones + NumberOfLaptops))"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total profit, which is calculated as (ProfitPhone multiplied by the number of phones) plus (ProfitLaptop multiplied by the number of laptops).",
        "formulation": "Max (ProfitPhone \\times NumberOfPhones + ProfitLaptop \\times NumberOfLaptops)",
        "code": {
            "gurobipy": "model.setObjective(ProfitPhone * NumberOfPhones + ProfitLaptop * NumberOfLaptops, GRB.MAXIMIZE)"
        }
    }
}