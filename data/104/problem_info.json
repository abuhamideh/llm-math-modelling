{
    "parametrized_description": "Maximize the total fat intake, which is FatApple multiplied by the number of apple servings plus FatCarrot multiplied by the number of carrot servings. Subject to the constraint that the total folate intake, calculated as FolateApple multiplied by the number of apple servings plus FolateCarrot multiplied by the number of carrot servings, does not exceed MaxFolate. Additionally, the number of apple servings must be equal to AppleToCarrotRatio multiplied by the number of carrot servings, and the number of carrot servings must be at least MinCarrotServings.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "FatApple": {
            "description": "Fat units per serving of apple flavored baby food",
            "shape": []
        },
        "FolateApple": {
            "description": "Folate units per serving of apple flavored baby food",
            "shape": []
        },
        "FatCarrot": {
            "description": "Fat units per serving of carrot flavored baby food",
            "shape": []
        },
        "FolateCarrot": {
            "description": "Folate units per serving of carrot flavored baby food",
            "shape": []
        },
        "AppleToCarrotRatio": {
            "description": "Multiplier for the number of apple servings relative to carrot servings",
            "shape": []
        },
        "MinCarrotServings": {
            "description": "Minimum servings of carrot flavored baby food",
            "shape": []
        },
        "MaxFolate": {
            "description": "Maximum total folate units allowed",
            "shape": []
        }
    },
    "variables": {
        "AppleServings": {
            "description": "The number of apple servings",
            "type": "continuous",
            "shape": []
        },
        "CarrotServings": {
            "description": "The number of carrot servings",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total folate intake (FolateApple * number of apple servings + FolateCarrot * number of carrot servings) does not exceed MaxFolate.",
            "formulation": "FolateApple \\times AppleServings + FolateCarrot \\times CarrotServings \\leq MaxFolate",
            "code": {
                "gurobipy": "model.addConstr(FolateApple * AppleServings + FolateCarrot * CarrotServings <= MaxFolate)"
            }
        },
        {
            "description": "The number of apple servings is equal to AppleToCarrotRatio multiplied by the number of carrot servings.",
            "formulation": "AppleServings = AppleToCarrotRatio \\times CarrotServings",
            "code": {
                "gurobipy": "model.addConstr(AppleServings == AppleToCarrotRatio * CarrotServings)"
            }
        },
        {
            "description": "The number of carrot servings is at least MinCarrotServings.",
            "formulation": "CarrotServings \\geq MinCarrotServings",
            "code": {
                "gurobipy": "model.addConstr(CarrotServings >= MinCarrotServings)"
            }
        }
    ],
    "objective": {
        "description": "The total fat intake is FatApple * number of apple servings + FatCarrot * number of carrot servings. The objective is to maximize the total fat intake.",
        "formulation": "Max FatApple \\times AppleServings + FatCarrot \\times CarrotServings",
        "code": {
            "gurobipy": "model.setObjective(FatApple * AppleServings + FatCarrot * CarrotServings, GRB.MAXIMIZE)"
        }
    }
}