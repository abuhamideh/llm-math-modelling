{
    "parametrized_description": "A company produces NumProducts different products using NumResources different resources. Each product requires specific amounts of resources as defined by ResourceRequired. The TotalAvailableResources limit the total usage of each resource. The production of one product must exceed the production of another product. Additionally, the production of a specific product is limited by MaxLiquidSanitizers. Each product can clean a certain number of hands as specified by CleaningPerUnit. The company aims to determine the number of each product to produce in order to maximize the total number of hands cleaned.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumProducts": {
            "description": "Number of different products",
            "shape": []
        },
        "NumResources": {
            "description": "Number of different resources",
            "shape": []
        },
        "ResourceRequired": {
            "description": "Amount of each resource required to produce one unit of each product",
            "shape": [
                "NumResources",
                "NumProducts"
            ]
        },
        "TotalAvailableResources": {
            "description": "Total available units of each resource",
            "shape": [
                "NumResources"
            ]
        },
        "MaxLiquidSanitizers": {
            "description": "Maximum number of liquid hand sanitizers that can be produced",
            "shape": []
        },
        "CleaningPerUnit": {
            "description": "Number of hands cleaned by each unit of each product",
            "shape": [
                "NumProducts"
            ]
        }
    },
    "variables": {
        "Production": {
            "description": "The number of units produced for each product",
            "type": "continuous",
            "shape": [
                "NumProducts"
            ]
        }
    },
    "constraints": [
        {
            "description": "Each product requires specific amounts of resources, and the total usage of each resource cannot exceed the TotalAvailableResources.",
            "formulation": "\\sum_{p=1}^{\\text{NumProducts}} \\text{ResourceRequired}_{r,p} \\cdot \\text{Production}_p \\leq \\text{TotalAvailableResources}_r \\quad \\forall r \\in \\{1, 2, \\dots, \\text{NumResources}\\}",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(ResourceRequired[r][p] * Production[p] for p in range(NumProducts)) <= TotalAvailableResources[r] for r in range(NumResources)), name=\"ResourceUsage\")"
            }
        },
        {
            "description": "The production of one product must exceed the production of another product.",
            "formulation": "Production_{i} \\geq Production_{j}",
            "code": {
                "gurobipy": "model.addConstr(Production[i] >= Production[j], \"Production_geq_{}_{}\".format(i, j))"
            }
        },
        {
            "description": "The production of a specific product cannot exceed MaxLiquidSanitizers.",
            "formulation": "Production_j \\leq MaxLiquidSanitizers",
            "code": {
                "gurobipy": "model.addConstr(Production[j] <= MaxLiquidSanitizers)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of hands cleaned, calculated as the sum of the number of each product produced multiplied by CleaningPerUnit.",
        "formulation": "Max \\sum_{p=1}^{NumProducts} Production_p \\times CleaningPerUnit_p",
        "code": {
            "gurobipy": "model.setObjective(quicksum(Production[p] * CleaningPerUnit[p] for p in range(NumProducts)), GRB.MAXIMIZE)"
        }
    }
}