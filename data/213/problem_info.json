{
    "parametrized_description": "A food company aims to determine the number of commercials to run on Pi TV, Beta Video, and Gamma Live to maximize the total audience. The total cost, calculated using CostPiTV, CostBetaVideo, and CostGammaLive, must not exceed TotalBudget. Additionally, the number of commercials on Beta Video must not exceed MaxCommercialsBetaVideo, the proportion of commercials on Gamma Live must not exceed MaxGammaProportion, and the proportion of commercials on Pi TV must be at least MinPiTVProportion.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CostPiTV": {
            "description": "Cost per commercial on Pi TV",
            "shape": []
        },
        "CostBetaVideo": {
            "description": "Cost per commercial on Beta Video",
            "shape": []
        },
        "CostGammaLive": {
            "description": "Cost per commercial on Gamma Live",
            "shape": []
        },
        "AudiencePiTV": {
            "description": "Audience per commercial on Pi TV",
            "shape": []
        },
        "AudienceBetaVideo": {
            "description": "Audience per commercial on Beta Video",
            "shape": []
        },
        "AudienceGammaLive": {
            "description": "Audience per commercial on Gamma Live",
            "shape": []
        },
        "MaxCommercialsBetaVideo": {
            "description": "Maximum number of commercials on Beta Video",
            "shape": []
        },
        "TotalBudget": {
            "description": "Total weekly budget",
            "shape": []
        },
        "MaxGammaProportion": {
            "description": "Maximum proportion of all commercials on Gamma Live",
            "shape": []
        },
        "MinPiTVProportion": {
            "description": "Minimum proportion of all commercials on Pi TV",
            "shape": []
        }
    },
    "variables": {
        "NumberPiTV": {
            "description": "The number of commercials on Pi TV",
            "type": "continuous",
            "shape": []
        },
        "NumberBetaVideo": {
            "description": "The number of commercials on Beta Video",
            "type": "continuous",
            "shape": []
        },
        "NumberGammaLive": {
            "description": "The number of commercials on Gamma Live",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total cost, calculated as (CostPiTV * NumberPiTV) + (CostBetaVideo * NumberBetaVideo) + (CostGammaLive * NumberGammaLive), must not exceed TotalBudget.",
            "formulation": "CostPiTV \\times NumberPiTV + CostBetaVideo \\times NumberBetaVideo + CostGammaLive \\times NumberGammaLive \\leq TotalBudget",
            "code": {
                "gurobipy": "model.addConstr(CostPiTV * NumberPiTV + CostBetaVideo * NumberBetaVideo + CostGammaLive * NumberGammaLive <= TotalBudget)"
            }
        },
        {
            "description": "The number of commercials on Beta Video must not exceed MaxCommercialsBetaVideo.",
            "formulation": "NumberBetaVideo \\leq MaxCommercialsBetaVideo",
            "code": {
                "gurobipy": "model.addConstr(NumberBetaVideo <= MaxCommercialsBetaVideo)"
            }
        },
        {
            "description": "The proportion of all commercials on Gamma Live must not exceed MaxGammaProportion.",
            "formulation": "NumberGammaLive \\leq MaxGammaProportion \\times (NumberPiTV + NumberBetaVideo + NumberGammaLive)",
            "code": {
                "gurobipy": "model.addConstr(NumberGammaLive <= MaxGammaProportion * (NumberPiTV + NumberBetaVideo + NumberGammaLive))"
            }
        },
        {
            "description": "The proportion of all commercials on Pi TV must be at least MinPiTVProportion.",
            "formulation": "NumberPiTV \\geq MinPiTVProportion \\times (NumberPiTV + NumberBetaVideo + NumberGammaLive)",
            "code": {
                "gurobipy": "model.addConstr(NumberPiTV >= MinPiTVProportion * (NumberPiTV + NumberBetaVideo + NumberGammaLive))"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total audience, which is the sum of (AudiencePiTV * NumberPiTV) + (AudienceBetaVideo * NumberBetaVideo) + (AudienceGammaLive * NumberGammaLive), while adhering to the budget and placement constraints.",
        "formulation": "Max \\,(AudiencePiTV \\times NumberPiTV + AudienceBetaVideo \\times NumberBetaVideo + AudienceGammaLive \\times NumberGammaLive)",
        "code": {
            "gurobipy": "model.setObjective(AudiencePiTV * NumberPiTV + AudienceBetaVideo * NumberBetaVideo + AudienceGammaLive * NumberGammaLive, GRB.MAXIMIZE)"
        }
    }
}