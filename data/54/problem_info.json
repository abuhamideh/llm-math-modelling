{
    "parametrized_description": "There are NumContainers types of specialized containers used to produce paste. Each container type requires WaterRequiredPerContainer units of water and PowderedPillRequiredPerContainer units of powdered pill to produce PasteProducedPerContainer units of paste. The pharmacy has WaterAvailability units of water and PowderedPillAvailability units of powdered pill available. Determine the number of each container type to maximize the total amount of paste produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumContainers": {
            "description": "Number of container types",
            "shape": []
        },
        "WaterAvailability": {
            "description": "Available units of water",
            "shape": []
        },
        "PowderedPillAvailability": {
            "description": "Available units of powdered pill",
            "shape": []
        },
        "WaterRequiredPerContainer": {
            "description": "Water required per container type",
            "shape": [
                "NumContainers"
            ]
        },
        "PowderedPillRequiredPerContainer": {
            "description": "Powdered pill required per container type",
            "shape": [
                "NumContainers"
            ]
        },
        "PasteProducedPerContainer": {
            "description": "Paste produced per container type",
            "shape": [
                "NumContainers"
            ]
        }
    },
    "variables": {
        "NumUsedContainers": {
            "description": "The number of containers used for each container type",
            "type": "continuous",
            "shape": [
                "NumContainers"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total water required by all container types does not exceed the available units of water.",
            "formulation": "\\sum_{j=1}^{NumContainers} WaterRequiredPerContainer_j \\cdot NumUsedContainers_j \\leq WaterAvailability",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WaterRequiredPerContainer[j] * NumUsedContainers[j] for j in range(NumContainers)) <= WaterAvailability)"
            }
        },
        {
            "description": "The total powdered pill required by all container types does not exceed the available units of powdered pill.",
            "formulation": "\\sum_{c=1}^{\\text{NumContainers}} \\text{NumUsedContainers}_{c} \\times \\text{PowderedPillRequiredPerContainer}_{c} \\leq \\text{PowderedPillAvailability}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumUsedContainers[c] * PowderedPillRequiredPerContainer[c] for c in range(NumContainers)) <= PowderedPillAvailability)"
            }
        }
    ],
    "objective": {
        "description": "The total paste produced is the sum of the paste produced by each container type. The objective is to maximize the total amount of paste produced.",
        "formulation": "Max \\sum_{i=1}^{\\text{NumContainers}} \\text{PasteProducedPerContainer}_{i} \\times \\text{NumUsedContainers}_{i}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(PasteProducedPerContainer[i] * NumUsedContainers[i] for i in range(NumContainers)), GRB.MAXIMIZE)"
        }
    }
}