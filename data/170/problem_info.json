{
    "parametrized_description": "A water salesman transports water using small and large kegs. Each small keg has a capacity of SmallKegCapacity liters, while each large keg has a capacity of LargeKegCapacity liters. The salesman can use at most MaxSmallKegsAvailable small kegs and MaxLargeKegsAvailable large kegs. The number of small kegs used must be at least SmallKegMultiplier times the number of large kegs used. The total number of kegs transported cannot exceed MaxTotalKegs, and at least MinLargeKegs large kegs must be used. Determine the number of small and large kegs to maximize the total amount of water transported.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallKegCapacity": {
            "description": "Capacity of a small keg in liters",
            "shape": []
        },
        "LargeKegCapacity": {
            "description": "Capacity of a large keg in liters",
            "shape": []
        },
        "MaxSmallKegsAvailable": {
            "description": "Maximum number of small kegs available",
            "shape": []
        },
        "MaxLargeKegsAvailable": {
            "description": "Maximum number of large kegs available",
            "shape": []
        },
        "SmallKegMultiplier": {
            "description": "The multiplier for the number of small kegs to be used compared to large kegs",
            "shape": []
        },
        "MaxTotalKegs": {
            "description": "Maximum total number of kegs that can be transported",
            "shape": []
        },
        "MinLargeKegs": {
            "description": "Minimum number of large kegs that must be used",
            "shape": []
        }
    },
    "variables": {
        "NumSmallKegsUsed": {
            "description": "The number of small kegs used",
            "type": "continuous",
            "shape": []
        },
        "NumLargeKegsUsed": {
            "description": "The number of large kegs used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of small kegs used must not exceed MaxSmallKegsAvailable.",
            "formulation": "NumSmallKegsUsed \\leq MaxSmallKegsAvailable",
            "code": {
                "gurobipy": "model.addConstr(NumSmallKegsUsed <= MaxSmallKegsAvailable)"
            }
        },
        {
            "description": "The number of large kegs used must not exceed MaxLargeKegsAvailable.",
            "formulation": "NumLargeKegsUsed \\leq MaxLargeKegsAvailable",
            "code": {
                "gurobipy": "model.addConstr(NumLargeKegsUsed <= MaxLargeKegsAvailable)"
            }
        },
        {
            "description": "The number of small kegs used must be at least SmallKegMultiplier times the number of large kegs used.",
            "formulation": "NumSmallKegsUsed \\geq SmallKegMultiplier \\times NumLargeKegsUsed",
            "code": {
                "gurobipy": "model.addConstr(NumSmallKegsUsed >= SmallKegMultiplier * NumLargeKegsUsed)"
            }
        },
        {
            "description": "The total number of kegs transported cannot exceed MaxTotalKegs.",
            "formulation": "NumSmallKegsUsed + NumLargeKegsUsed \\leq MaxTotalKegs",
            "code": {
                "gurobipy": "model.addConstr(NumSmallKegsUsed + NumLargeKegsUsed <= MaxTotalKegs)"
            }
        },
        {
            "description": "At least MinLargeKegs large kegs must be used.",
            "formulation": "NumLargeKegsUsed \\geq MinLargeKegs",
            "code": {
                "gurobipy": "model.addConstr(NumLargeKegsUsed >= MinLargeKegs)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total amount of water transported, which is the sum of the capacities of the small and large kegs used.",
        "formulation": "Max \\left( NumSmallKegsUsed \\times SmallKegCapacity + NumLargeKegsUsed \\times LargeKegCapacity \\right)",
        "code": {
            "gurobipy": "model.setObjective(NumSmallKegsUsed * SmallKegCapacity + NumLargeKegsUsed * LargeKegCapacity, GRB.MAXIMIZE)"
        }
    }
}