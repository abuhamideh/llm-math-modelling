# Code automatically generated from OptiMUS

# Problem type: LP        
# Problem description
'''
A company operates on TotalLand acres of land using NumWellTypes types of wells.
Each well type produces ProductionPerAcre[i] units of oil per acre, generates
PollutionPerAcre[i] units of pollution per acre, and requires
DrillBitsPerAcre[i] drill bits per acre. The company has a total of
TotalDrillBits drill bits available and must limit pollution to at most
MaxPollution units. The objective is to determine the number of acres allocated
to each well type to maximize total oil production.
'''
# Import necessary libraries
import json
from gurobipy import *
     
# Create a new model
model = Model()

# Load data 
with open("/Users/gaowenzhi/Desktop/optimus-OR-paper/data/new_dataset/sample_datasets/55/parameters.json", "r") as f:
    data = json.load(f)
    
# @Def: definition of a target
# @Shape: shape of a target	        
        
# Parameters 
# @Parameter TotalLand @Def: Total land available for operations @Shape: [] 
TotalLand = data['TotalLand']
# @Parameter NumWellTypes @Def: Number of different well types @Shape: [] 
NumWellTypes = data['NumWellTypes']
# @Parameter ProductionPerAcre @Def: Oil production per acre for each well type @Shape: ['NumWellTypes'] 
ProductionPerAcre = data['ProductionPerAcre']
# @Parameter PollutionPerAcre @Def: Pollution generated per acre for each well type @Shape: ['NumWellTypes'] 
PollutionPerAcre = data['PollutionPerAcre']
# @Parameter DrillBitsPerAcre @Def: Drill bits required per acre for each well type @Shape: ['NumWellTypes'] 
DrillBitsPerAcre = data['DrillBitsPerAcre']
# @Parameter TotalDrillBits @Def: Total available drill bits @Shape: [] 
TotalDrillBits = data['TotalDrillBits']
# @Parameter MaxPollution @Def: Maximum allowed pollution units @Shape: [] 
MaxPollution = data['MaxPollution']
    
# Variables 
# @Variable LandAllocated @Def: The land allocated to each well type @Shape: ['NumWellTypes'] 
LandAllocated = model.addVars(NumWellTypes, vtype=GRB.CONTINUOUS, name="LandAllocated")
    
# Constraints 
# @Constraint Constr_1 @Def: The total land allocated to all well types must not exceed TotalLand acres.
model.addConstr(quicksum(LandAllocated[i] for i in range(NumWellTypes)) <= TotalLand)
# @Constraint Constr_2 @Def: The total drill bits required for all well types must not exceed TotalDrillBits drill bits.
model.addConstr(quicksum(LandAllocated[i] * DrillBitsPerAcre[i] for i in range(NumWellTypes)) <= TotalDrillBits)
# @Constraint Constr_3 @Def: The total pollution generated by all well types must not exceed MaxPollution units.
model.addConstr(quicksum(PollutionPerAcre[i] * LandAllocated[i] for i in range(NumWellTypes)) <= MaxPollution)
    
# Objective 
# @Objective Objective @Def: The objective is to maximize total oil production, which is the sum of the oil production from each well type allocated across acres.
model.setObjective(quicksum(ProductionPerAcre[i] * LandAllocated[i] for i in range(NumWellTypes)), GRB.MAXIMIZE)
    
# Solve 
model.optimize()
    
# Extract solution 
solution = {}
variables = {}
objective = []
variables['LandAllocated'] = {i: LandAllocated[i].x for i in range(NumWellTypes)}
solution['variables'] = variables
solution['objective'] = model.objVal
with open('solution.json', 'w') as f:
    json.dump(solution, f, indent=4)
