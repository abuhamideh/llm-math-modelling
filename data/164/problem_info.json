{
    "parametrized_description": "A recycling company selects the number of SmallBins and LargeBins, where each SmallBin requires WorkersPerSmallBin workers and holds CapacitySmallBin units of recycling material, and each LargeBin requires WorkersPerLargeBin workers and holds CapacityLargeBin units of recycling material. The total number of workers used must not exceed TotalWorkers. The number of SmallBins must be SmallBinToLargeBinRatio times the number of LargeBins. Additionally, the number of SmallBins must be at least MinimumSmallBins and the number of LargeBins must be at least MinimumLargeBins. The objective is to maximize the total recycling material collected.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "WorkersPerSmallBin": {
            "description": "Number of workers required for a small bin",
            "shape": []
        },
        "WorkersPerLargeBin": {
            "description": "Number of workers required for a large bin",
            "shape": []
        },
        "CapacitySmallBin": {
            "description": "Capacity of a small bin in units of recycling material",
            "shape": []
        },
        "CapacityLargeBin": {
            "description": "Capacity of a large bin in units of recycling material",
            "shape": []
        },
        "TotalWorkers": {
            "description": "Total number of available workers",
            "shape": []
        },
        "SmallBinToLargeBinRatio": {
            "description": "Required ratio of small bins to large bins",
            "shape": []
        },
        "MinimumSmallBins": {
            "description": "Minimum number of small bins",
            "shape": []
        },
        "MinimumLargeBins": {
            "description": "Minimum number of large bins",
            "shape": []
        }
    },
    "variables": {
        "NumberSmallBins": {
            "description": "The number of small bins used",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumberLargeBins": {
            "description": "The number of large bins used",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total number of workers used must not exceed TotalWorkers. This is calculated as WorkersPerSmallBin multiplied by the number of SmallBins plus WorkersPerLargeBin multiplied by the number of LargeBins.",
            "formulation": "WorkersPerSmallBin \\cdot NumberSmallBins + WorkersPerLargeBin \\cdot NumberLargeBins \\leq TotalWorkers",
            "code": {
                "gurobipy": "model.addConstr(WorkersPerSmallBin * NumberSmallBins + WorkersPerLargeBin * NumberLargeBins <= TotalWorkers)"
            }
        },
        {
            "description": "The number of SmallBins must be equal to SmallBinToLargeBinRatio times the number of LargeBins.",
            "formulation": "NumberSmallBins = SmallBinToLargeBinRatio \\times NumberLargeBins",
            "code": {
                "gurobipy": "model.addConstr(NumberSmallBins == SmallBinToLargeBinRatio * NumberLargeBins)"
            }
        },
        {
            "description": "The number of SmallBins must be at least MinimumSmallBins.",
            "formulation": "NumberSmallBins \\geq MinimumSmallBins",
            "code": {
                "gurobipy": "model.addConstr(NumberSmallBins >= MinimumSmallBins)"
            }
        },
        {
            "description": "The number of LargeBins must be at least MinimumLargeBins.",
            "formulation": "NumberLargeBins \\geq MinimumLargeBins",
            "code": {
                "gurobipy": "model.addConstr(NumberLargeBins >= MinimumLargeBins, name=\"MinLargeBins\")"
            }
        }
    ],
    "objective": {
        "description": "Total recycling material collected is calculated as CapacitySmallBin multiplied by the number of SmallBins plus CapacityLargeBin multiplied by the number of LargeBins. The objective is to maximize the total recycling material collected.",
        "formulation": "Max \\ CapacitySmallBin \\times NumberSmallBins + CapacityLargeBin \\times NumberLargeBins",
        "code": {
            "gurobipy": "model.setObjective(CapacitySmallBin * NumberSmallBins + CapacityLargeBin * NumberLargeBins, GRB.MAXIMIZE)"
        }
    }
}