{
    "parametrized_description": "There are NumReactions different chemical reactions. Each reaction requires ResourceRequirement units of each of the NumResources types of resources and produces ProductionPerReaction units of a rare compound. There are ResourceAvailable units of each resource available in the lab. Determine the number of reactions of each type to maximize the total amount of the rare compound produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumReactions": {
            "description": "Number of reaction types",
            "shape": []
        },
        "NumResources": {
            "description": "Number of resource types",
            "shape": []
        },
        "ResourceRequirement": {
            "description": "Units of resource j required for reaction i",
            "shape": [
                "NumReactions",
                "NumResources"
            ]
        },
        "ProductionPerReaction": {
            "description": "Units of rare compound produced by reaction i",
            "shape": [
                "NumReactions"
            ]
        },
        "ResourceAvailable": {
            "description": "Total units of resource j available",
            "shape": [
                "NumResources"
            ]
        }
    },
    "variables": {
        "NumberReactions": {
            "description": "The number of reactions of type i",
            "type": "continuous",
            "shape": [
                "NumReactions"
            ]
        }
    },
    "constraints": [
        {
            "description": "For each resource type, the total units used by all reactions cannot exceed the available ResourceAvailable units. Specifically, for each resource j, the sum of (ResourceRequirement[i][j] * number of reactions of type i) across all reactions i must be less than or equal to ResourceAvailable[j].",
            "formulation": "\\sum_{i=1}^{NumReactions} ResourceRequirement[i][j] \\cdot NumberReactions[i] \\leq ResourceAvailable[j]",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(ResourceRequirement[i][j] * NumberReactions[i] for i in range(NumReactions)) <= ResourceAvailable[j] for j in range(NumResources)), name='ResourceUsage')"
            }
        },
        {
            "description": "The number of reactions of each type must be non-negative.",
            "formulation": "NumberReactions \\geq 0",
            "code": {
                "gurobipy": "model.addConstrs((NumberReactions[i] >= 0 for i in range(NumReactions)))"
            }
        }
    ],
    "objective": {
        "description": "The total amount of the rare compound produced is the sum of (ProductionPerReaction[i] * number of reactions of type i) across all reactions i. The objective is to maximize the total amount of the rare compound produced.",
        "formulation": "Max \\sum_{i=1}^{\\text{NumReactions}} \\text{ProductionPerReaction}_i \\times \\text{NumberReactions}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ProductionPerReaction[i] * NumberReactions[i] for i in range(NumReactions)), GRB.MAXIMIZE)"
        }
    }
}