{
    "parametrized_description": "A woman has TotalMoney to gamble on NumBets different sports bets. Each sport bet has a loss probability given by LossProbabilities and a payout per dollar given by Payouts. She limits her average chance of losing her money to at most MaxAverageLossProbability. Determine the allocation of money to each sport bet to maximize her average payout.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TotalMoney": {
            "description": "Total amount of money available to gamble",
            "shape": []
        },
        "NumBets": {
            "description": "Number of different sports bets",
            "shape": []
        },
        "LossProbabilities": {
            "description": "Chance of losing money for each sport bet",
            "shape": [
                "NumBets"
            ]
        },
        "Payouts": {
            "description": "Payout per dollar for each sport bet",
            "shape": [
                "NumBets"
            ]
        },
        "MaxAverageLossProbability": {
            "description": "Maximum average chance of losing money",
            "shape": []
        }
    },
    "variables": {
        "Allocation": {
            "description": "The amount of money allocated to each sports bet",
            "type": "continuous",
            "shape": [
                "NumBets"
            ]
        }
    },
    "constraints": [
        {
            "description": "The sum of allocations to all sports bets must equal TotalMoney.",
            "formulation": "\\sum_{i=1}^{NumBets} Allocation_i = TotalMoney",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Allocation[i] for i in range(NumBets)) == TotalMoney)"
            }
        },
        {
            "description": "The weighted average of LossProbabilities, based on the allocation, must not exceed MaxAverageLossProbability.",
            "formulation": "\\sum_{i=1}^{NumBets} Allocation_i \\cdot LossProbabilities_i \\leq TotalMoney \\cdot MaxAverageLossProbability",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Allocation[i] * LossProbabilities[i] for i in range(NumBets)) <= TotalMoney * MaxAverageLossProbability)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total expected payout from all sports bets.",
        "formulation": "Max \\sum_{i=1}^{NumBets} Allocation_i \\cdot Payouts_i \\cdot (1 - LossProbabilities_i)",
        "code": {
            "gurobipy": "model.setObjective(quicksum(Allocation[i] * Payouts[i] * (1 - LossProbabilities[i]) for i in range(NumBets)), GRB.MAXIMIZE)"
        }
    }
}