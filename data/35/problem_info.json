{
    "parametrized_description": "A farmer has TotalFarmArea acres to plant NumCrops different crops. The total watering budget is TotalWateringBudget dollars and the total available labor is TotalAvailableLabor days. Each crop requires LaborPerAcre[i] days of labor and WateringCostPerAcre[i] dollars per acre for watering. The profit per acre for each crop is ProfitPerAcre[i] dollars. The objective is to maximize the total profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TotalFarmArea": {
            "description": "Total area of the farm in acres",
            "shape": []
        },
        "TotalWateringBudget": {
            "description": "Total budget available for watering in dollars",
            "shape": []
        },
        "TotalAvailableLabor": {
            "description": "Total available labor in days",
            "shape": []
        },
        "NumCrops": {
            "description": "Number of different crops to be planted",
            "shape": []
        },
        "LaborPerAcre": {
            "description": "Amount of labor required per acre for each crop in days",
            "shape": [
                "NumCrops"
            ]
        },
        "WateringCostPerAcre": {
            "description": "Watering cost per acre for each crop in dollars",
            "shape": [
                "NumCrops"
            ]
        },
        "ProfitPerAcre": {
            "description": "Profit per acre for each crop in dollars",
            "shape": [
                "NumCrops"
            ]
        }
    },
    "variables": {
        "Acreage": {
            "description": "The acreage allocated to each crop",
            "type": "continuous",
            "shape": [
                "NumCrops"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total acreage allocated to all crops must not exceed TotalFarmArea.",
            "formulation": "\\sum_{i=1}^{NumCrops} Acreage_{i} \\leq TotalFarmArea",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Acreage[i] for i in range(NumCrops)) <= TotalFarmArea)"
            }
        },
        {
            "description": "The total watering cost, calculated as the sum of WateringCostPerAcre[i] multiplied by the acreage of each crop, must not exceed TotalWateringBudget.",
            "formulation": "\\sum_{i=1}^{NumCrops} WateringCostPerAcre_i \\cdot Acreage_i \\leq TotalWateringBudget",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WateringCostPerAcre[i] * Acreage[i] for i in range(NumCrops)) <= TotalWateringBudget)"
            }
        },
        {
            "description": "The total labor required, calculated as the sum of LaborPerAcre[i] multiplied by the acreage of each crop, must not exceed TotalAvailableLabor.",
            "formulation": "\\sum_{i=1}^{NumCrops} LaborPerAcre_i \\cdot Acreage_i \\leq TotalAvailableLabor",
            "code": {
                "gurobipy": "model.addConstr(quicksum(LaborPerAcre[i] * Acreage[i] for i in range(NumCrops)) <= TotalAvailableLabor)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total profit, which is the sum of ProfitPerAcre[i] multiplied by the acreage of each crop.",
        "formulation": "Max \\sum_{i=1}^{NumCrops} ProfitPerAcre_i \\times Acreage_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ProfitPerAcre[i] * Acreage[i] for i in range(NumCrops)), GRB.MAXIMIZE)"
        }
    }
}