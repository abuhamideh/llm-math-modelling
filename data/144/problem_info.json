{
    "parametrized_description": "A lawn mowing service utilizes SmallTeams and LargeTeams. Each SmallTeam requires EmployeesPerSmallTeam employees and can mow AreaMowedSmallTeam of lawn. Each LargeTeam requires EmployeesPerLargeTeam employees and can mow AreaMowedLargeTeam of lawn. The service has TotalEmployees available employees. The number of SmallTeams must be at least RatioSmallToLargeTeams times the number of LargeTeams. Additionally, there must be a minimum of MinLargeTeams LargeTeams and at least MinSmallTeams SmallTeams. The objective is to determine the optimal number of SmallTeams and LargeTeams to maximize the total area mowed.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "EmployeesPerSmallTeam": {
            "description": "Number of employees required per small team",
            "shape": []
        },
        "AreaMowedSmallTeam": {
            "description": "Area mowed by a small team",
            "shape": []
        },
        "EmployeesPerLargeTeam": {
            "description": "Number of employees required per large team",
            "shape": []
        },
        "AreaMowedLargeTeam": {
            "description": "Area mowed by a large team",
            "shape": []
        },
        "TotalEmployees": {
            "description": "Total number of employees available",
            "shape": []
        },
        "RatioSmallToLargeTeams": {
            "description": "Minimum ratio of small teams to large teams",
            "shape": []
        },
        "MinLargeTeams": {
            "description": "Minimum number of large teams",
            "shape": []
        },
        "MinSmallTeams": {
            "description": "Minimum number of small teams",
            "shape": []
        }
    },
    "variables": {
        "SmallTeams": {
            "description": "The number of small teams",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "LargeTeams": {
            "description": "The number of large teams",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total number of employees required by SmallTeams and LargeTeams cannot exceed TotalEmployees.",
            "formulation": "EmployeesPerSmallTeam \\times SmallTeams + EmployeesPerLargeTeam \\times LargeTeams \\leq TotalEmployees",
            "code": {
                "gurobipy": "model.addConstr(EmployeesPerSmallTeam * SmallTeams + EmployeesPerLargeTeam * LargeTeams <= TotalEmployees)"
            }
        },
        {
            "description": "The number of SmallTeams must be at least RatioSmallToLargeTeams times the number of LargeTeams.",
            "formulation": "SmallTeams \\geq RatioSmallToLargeTeams \\times LargeTeams",
            "code": {
                "gurobipy": "model.addConstr(SmallTeams >= RatioSmallToLargeTeams * LargeTeams)"
            }
        },
        {
            "description": "There must be at least MinLargeTeams LargeTeams.",
            "formulation": "LargeTeams \\geq MinLargeTeams",
            "code": {
                "gurobipy": "model.addConstr(LargeTeams >= MinLargeTeams)"
            }
        },
        {
            "description": "There must be at least MinSmallTeams SmallTeams.",
            "formulation": "SmallTeams \\geq MinSmallTeams",
            "code": {
                "gurobipy": "model.addConstr(SmallTeams >= MinSmallTeams)"
            }
        }
    ],
    "objective": {
        "description": "Total area mowed is the sum of the areas mowed by SmallTeams and LargeTeams. The objective is to maximize the total area mowed.",
        "formulation": "Max \\left( AreaMowedSmallTeam \\times SmallTeams + AreaMowedLargeTeam \\times LargeTeams \\right )",
        "code": {
            "gurobipy": "model.setObjective(AreaMowedSmallTeam * SmallTeams + AreaMowedLargeTeam * LargeTeams, GRB.MAXIMIZE)"
        }
    }
}