{
    "parametrized_description": "A fast food place produces wraps and platters. Each wrap requires MeatPerWrap units of meat and RicePerWrap units of rice, and takes TimePerWrap time to make. Each platter requires MeatPerPlatter units of meat and RicePerPlatter units of rice, and takes TimePerPlatter time to make. The production must use at least MinMeat units of meat and MinRice units of rice. Additionally, the number of wraps produced must be at least WrapPlatterRatio times the number of platters produced. The objective is to minimize the total production time.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "MeatPerWrap": {
            "description": "Amount of meat required to produce one wrap",
            "shape": []
        },
        "RicePerWrap": {
            "description": "Amount of rice required to produce one wrap",
            "shape": []
        },
        "MeatPerPlatter": {
            "description": "Amount of meat required to produce one platter",
            "shape": []
        },
        "RicePerPlatter": {
            "description": "Amount of rice required to produce one platter",
            "shape": []
        },
        "TimePerWrap": {
            "description": "Production time required to produce one wrap",
            "shape": []
        },
        "TimePerPlatter": {
            "description": "Production time required to produce one platter",
            "shape": []
        },
        "MinMeat": {
            "description": "Minimum required amount of meat",
            "shape": []
        },
        "MinRice": {
            "description": "Minimum required amount of rice",
            "shape": []
        },
        "WrapPlatterRatio": {
            "description": "Minimum ratio of wraps to platters",
            "shape": []
        }
    },
    "variables": {
        "NumberOfWraps": {
            "description": "The number of wraps produced",
            "type": "continuous",
            "shape": []
        },
        "NumberOfPlatters": {
            "description": "The number of platters produced",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total meat used, calculated as MeatPerWrap multiplied by the number of wraps plus MeatPerPlatter multiplied by the number of platters, must be at least MinMeat.",
            "formulation": "MeatPerWrap \\cdot NumberOfWraps + MeatPerPlatter \\cdot NumberOfPlatters \\geq MinMeat",
            "code": {
                "gurobipy": "model.addConstr(MeatPerWrap * NumberOfWraps + MeatPerPlatter * NumberOfPlatters >= MinMeat)"
            }
        },
        {
            "description": "The total rice used, calculated as RicePerWrap multiplied by the number of wraps plus RicePerPlatter multiplied by the number of platters, must be at least MinRice.",
            "formulation": "RicePerWrap \\cdot NumberOfWraps + RicePerPlatter \\cdot NumberOfPlatters \\geq MinRice",
            "code": {
                "gurobipy": "model.addConstr(RicePerWrap * NumberOfWraps + RicePerPlatter * NumberOfPlatters >= MinRice)"
            }
        },
        {
            "description": "The number of wraps produced must be at least WrapPlatterRatio times the number of platters produced.",
            "formulation": "NumberOfWraps \\geq WrapPlatterRatio \\times NumberOfPlatters",
            "code": {
                "gurobipy": "model.addConstr(NumberOfWraps >= WrapPlatterRatio * NumberOfPlatters)"
            }
        }
    ],
    "objective": {
        "description": "Total production time is TimePerWrap multiplied by the number of wraps plus TimePerPlatter multiplied by the number of platters. The objective is to minimize the total production time while meeting requirements for meat, rice, and product ratio.",
        "formulation": "Min \\left( TimePerWrap \\times NumberOfWraps + TimePerPlatter \\times NumberOfPlatters \\right)",
        "code": {
            "gurobipy": "model.setObjective(TimePerWrap * NumberOfWraps + TimePerPlatter * NumberOfPlatters, GRB.MINIMIZE)"
        }
    }
}