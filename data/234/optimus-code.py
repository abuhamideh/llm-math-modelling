# Code automatically generated from OptiMUS

# Problem type: MIP        
# Problem description
'''
A metal-working shop has access to two types of metal-working equipment, a
ChopSaw and a SteelCutter. A ChopSaw can cut ChopSawCuttingCapacity pounds of
steel and generates ChopSawWaste units of waste per day. A SteelCutter can cut
SteelCutterCuttingCapacity pounds of steel and generates SteelCutterWaste units
of waste per day. The metal-working shop must cut TotalCuttingRequirement pounds
of metal every day. The waste generated must not exceed WasteLimit units per
day. How should the metal-working shop purchase their metal-working equipment to
minimize the total number of metal-working equipment needed?
'''
# Import necessary libraries
import json
from gurobipy import *
     
# Create a new model
model = Model()

# Load data 
with open("/Users/gaowenzhi/Desktop/optimus-OR-paper/data/new_dataset/sample_datasets/234/parameters.json", "r") as f:
    data = json.load(f)
    
# @Def: definition of a target
# @Shape: shape of a target
        
# Parameters 
# @Parameter ChopSawCuttingCapacity @Def: Cutting capacity of a chop saw in pounds per day @Shape: [] 
ChopSawCuttingCapacity = data['ChopSawCuttingCapacity']
# @Parameter ChopSawWaste @Def: Waste generated by a chop saw per day @Shape: [] 
ChopSawWaste = data['ChopSawWaste']
# @Parameter SteelCutterCuttingCapacity @Def: Cutting capacity of a steel cutter in pounds per day @Shape: [] 
SteelCutterCuttingCapacity = data['SteelCutterCuttingCapacity']
# @Parameter SteelCutterWaste @Def: Waste generated by a steel cutter per day @Shape: [] 
SteelCutterWaste = data['SteelCutterWaste']
# @Parameter TotalCuttingRequirement @Def: Total metal cutting requirement per day in pounds @Shape: [] 
TotalCuttingRequirement = data['TotalCuttingRequirement']
# @Parameter WasteLimit @Def: Maximum allowable waste per day in units @Shape: [] 
WasteLimit = data['WasteLimit']

# Variables 
# @Variable NumberOfChopSaws @Def: The number of chop saws used @Shape: ['Integer'] 
NumberOfChopSaws = model.addVar(vtype=GRB.INTEGER, name="NumberOfChopSaws")
# @Variable NumberOfSteelCutters @Def: The number of steel cutters used @Shape: ['Integer'] 
NumberOfSteelCutters = model.addVar(vtype=GRB.INTEGER, name="NumberOfSteelCutters")

# Constraints 
# @Constraint Constr_1 @Def: The total metal cutting capacity of ChopSaws and SteelCutters must be at least 520 pounds per day.
model.addConstr(ChopSawCuttingCapacity * NumberOfChopSaws + SteelCutterCuttingCapacity * NumberOfSteelCutters >= TotalCuttingRequirement)
# @Constraint Constr_2 @Def: The total waste generated by ChopSaws and SteelCutters must not exceed 400 units per day.
model.addConstr(NumberOfChopSaws * ChopSawWaste + NumberOfSteelCutters * SteelCutterWaste <= WasteLimit)

# Objective 
# @Objective Objective @Def: Minimize the total number of metal-working equipment (ChopSaws and SteelCutters) needed to meet the daily cutting and waste requirements.
model.setObjective(NumberOfChopSaws + NumberOfSteelCutters, GRB.MINIMIZE)

# Solve 
model.optimize()

# Extract solution 
solution = {}
variables = {}
objective = []
variables['NumberOfChopSaws'] = NumberOfChopSaws.x
variables['NumberOfSteelCutters'] = NumberOfSteelCutters.x
solution['variables'] = variables
solution['objective'] = model.objVal
with open('solution.json', 'w') as f:
    json.dump(solution, f, indent=4)
