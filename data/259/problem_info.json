{
    "parametrized_description": "A village delivers mail to nearby villages either by runners or canoeers. Runners can carry RunnerCapacity bags of mail each trip and take RunnerTime hours. Canoeers can carry CanoeCapacity bags of mail each trip and take CanoeTime hours. At most MaxCanoePercentage of deliveries can be made by canoe. Additionally, the village can spare at most MaxTotalHours total hours for deliveries and must use at least MinRunners runners. The objective is to determine the number of trips by runners and canoeers to maximize the total amount of mail delivered.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "RunnerCapacity": {
            "description": "Number of bags a runner can carry each trip",
            "shape": []
        },
        "RunnerTime": {
            "description": "Time a runner takes per trip (in hours)",
            "shape": []
        },
        "CanoeCapacity": {
            "description": "Number of bags a canoeer can carry each trip",
            "shape": []
        },
        "CanoeTime": {
            "description": "Time a canoeer takes per trip (in hours)",
            "shape": []
        },
        "MaxCanoePercentage": {
            "description": "Maximum fraction of total deliveries that can be made by canoe",
            "shape": []
        },
        "MaxTotalHours": {
            "description": "Maximum total hours the village can spare for deliveries",
            "shape": []
        },
        "MinRunners": {
            "description": "Minimum number of runners that must be used",
            "shape": []
        }
    },
    "variables": {
        "NumRunnerTrips": {
            "description": "Number of trips made by runners",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumCanoeTrips": {
            "description": "Number of trips made by canoeers",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumberOfRunners": {
            "description": "The number of runners used for deliveries",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total hours spent on deliveries by runners and canoeers must not exceed MaxTotalHours.",
            "formulation": "RunnerTime \\times NumRunnerTrips + CanoeTime \\times NumCanoeTrips \\leq MaxTotalHours",
            "code": {
                "gurobipy": "model.addConstr(RunnerTime * NumRunnerTrips + CanoeTime * NumCanoeTrips <= MaxTotalHours)"
            }
        },
        {
            "description": "No more than MaxCanoePercentage of the total mail delivered can be delivered by canoeers.",
            "formulation": "NumCanoeTrips \\times CanoeCapacity \\leq MaxCanoePercentage \\times \\left( NumRunnerTrips \\times RunnerCapacity + NumCanoeTrips \\times CanoeCapacity \\right)",
            "code": {
                "gurobipy": "model.addConstr(NumCanoeTrips * CanoeCapacity <= MaxCanoePercentage * (NumRunnerTrips * RunnerCapacity + NumCanoeTrips * CanoeCapacity))"
            }
        },
        {
            "description": "At least MinRunners runners must be used for deliveries.",
            "formulation": "NumberOfRunners \\geq MinRunners",
            "code": {
                "gurobipy": "model.addConstr(NumberOfRunners >= MinRunners)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total amount of mail delivered by runners and canoeers within the given time, capacity, and usage constraints.",
        "formulation": "Max \\left( NumRunnerTrips \\times RunnerCapacity + NumCanoeTrips \\times CanoeCapacity \\right)",
        "code": {
            "gurobipy": "model.setObjective(NumRunnerTrips * RunnerCapacity + NumCanoeTrips * CanoeCapacity, GRB.MAXIMIZE)"
        }
    }
}