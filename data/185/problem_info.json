{
    "parametrized_description": "A magic school sends letters to students using carrier pigeons and owls. Each carrier pigeon can carry PigeonLetterCapacity letters per trip and requires PigeonTreatCost treats for service. Each owl can carry OwlLetterCapacity letters per trip and requires OwlTreatCost treats for service. At most MaxOwlProportion of the total birds can be owls. The school has TotalTreats treats available. At least MinPigeons carrier pigeons must be used. The goal is to determine the number of carrier pigeons and owls to maximize the total number of letters sent.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "PigeonLetterCapacity": {
            "description": "The number of letters a carrier pigeon can carry at a time",
            "shape": []
        },
        "PigeonTreatCost": {
            "description": "The number of treats required for a carrier pigeon's service",
            "shape": []
        },
        "OwlLetterCapacity": {
            "description": "The number of letters an owl can carry at a time",
            "shape": []
        },
        "OwlTreatCost": {
            "description": "The number of treats required for an owl's service",
            "shape": []
        },
        "MaxOwlProportion": {
            "description": "The maximum proportion of birds that can be owls",
            "shape": []
        },
        "TotalTreats": {
            "description": "The total number of treats available",
            "shape": []
        },
        "MinPigeons": {
            "description": "The minimum number of carrier pigeons that must be used",
            "shape": []
        }
    },
    "variables": {
        "NumPigeons": {
            "description": "The number of carrier pigeons used",
            "type": "continuous",
            "shape": []
        },
        "NumOwls": {
            "description": "The number of owls used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of treats required for carrier pigeons and owls must not exceed TotalTreats.",
            "formulation": "PigeonTreatCost \\cdot NumPigeons + OwlTreatCost \\cdot NumOwls \\leq TotalTreats",
            "code": {
                "gurobipy": "model.addConstr(PigeonTreatCost * NumPigeons + OwlTreatCost * NumOwls <= TotalTreats, \"TotalTreats\")"
            }
        },
        {
            "description": "The number of owls used must be at most MaxOwlProportion of the total number of birds.",
            "formulation": "NumOwls \\leq MaxOwlProportion \\times (NumOwls + NumPigeons)",
            "code": {
                "gurobipy": "model.addConstr(NumOwls <= MaxOwlProportion * (NumOwls + NumPigeons))"
            }
        },
        {
            "description": "At least MinPigeons carrier pigeons must be used.",
            "formulation": "NumPigeons \\geq MinPigeons",
            "code": {
                "gurobipy": "model.addConstr(NumPigeons >= MinPigeons)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of letters sent, which is the sum of letters carried by carrier pigeons and owls.",
        "formulation": "Max \\; NumPigeons \\times PigeonLetterCapacity + NumOwls \\times OwlLetterCapacity",
        "code": {
            "gurobipy": "model.setObjective(NumPigeons * PigeonLetterCapacity + NumOwls * OwlLetterCapacity, GRB.MAXIMIZE)"
        }
    }
}