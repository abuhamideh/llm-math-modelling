{
    "parametrized_description": "Determine the quantities of sulfate and ginger to add to the shampoo such that the number of sulfate units is at least MinSulfateUnits, the combined number of sulfate and ginger units equals TotalUnits, the number of sulfate units does not exceed MaxSulfateToGingerRatio multiplied by the number of ginger units, one ingredient is added before the other, and the total effective time, based on TimePerUnitSulfate and TimePerUnitGinger, is minimized.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TimePerUnitSulfate": {
            "description": "Time taken for one unit of sulfate to be effective",
            "shape": []
        },
        "TimePerUnitGinger": {
            "description": "Time taken for one unit of ginger to be effective",
            "shape": []
        },
        "MinSulfateUnits": {
            "description": "Minimum required units of sulfate",
            "shape": []
        },
        "TotalUnits": {
            "description": "Total units of sulfate and ginger",
            "shape": []
        },
        "MaxSulfateToGingerRatio": {
            "description": "Maximum allowed ratio of sulfate to ginger",
            "shape": []
        }
    },
    "variables": {
        "SulfateUnits": {
            "description": "The number of sulfate units",
            "type": "continuous",
            "shape": []
        },
        "GingerUnits": {
            "description": "The number of ginger units",
            "type": "continuous",
            "shape": []
        },
        "SulfateAddedFirst": {
            "description": "Binary variable indicating whether Sulfate is added before Ginger",
            "type": "continuous",
            "shape": [
                "binary"
            ]
        }
    },
    "constraints": [
        {
            "description": "The number of sulfate units is at least MinSulfateUnits.",
            "formulation": "SulfateUnits \\geq MinSulfateUnits",
            "code": {
                "gurobipy": "model.addConstr(SulfateUnits >= MinSulfateUnits)"
            }
        },
        {
            "description": "The combined number of sulfate and ginger units equals TotalUnits.",
            "formulation": "SulfateUnits + GingerUnits = TotalUnits",
            "code": {
                "gurobipy": "model.addConstr(SulfateUnits + GingerUnits == TotalUnits)"
            }
        },
        {
            "description": "The number of sulfate units does not exceed MaxSulfateToGingerRatio multiplied by the number of ginger units.",
            "formulation": "SulfateUnits \\leq MaxSulfateToGingerRatio \\times GingerUnits",
            "code": {
                "gurobipy": "model.addConstr(SulfateUnits <= MaxSulfateToGingerRatio * GingerUnits)"
            }
        },
        {
            "description": "One ingredient is added before the other.",
            "formulation": "SulfateAddedFirst = 1 \\\\ SulfateAddedFirst \\in \\{0,1\\}",
            "code": {
                "gurobipy": "model.addConstr(SulfateAddedFirst == 1)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total effective time, calculated as (TimePerUnitSulfate * number of sulfate units) + (TimePerUnitGinger * number of ginger units).",
        "formulation": "Min \\left( TimePerUnitSulfate \\cdot SulfateUnits + TimePerUnitGinger \\cdot GingerUnits \\right)",
        "code": {
            "gurobipy": "model.setObjective(TimePerUnitSulfate * SulfateUnits + TimePerUnitGinger * GingerUnits, GRB.MINIMIZE)"
        }
    }
}