{
    "parametrized_description": "A company sells two types of products: scooters and bikes. The profit per scooter is ProfitPerScooter and the profit per bike is ProfitPerBike. Each scooter requires DesignHoursPerScooter hours with the design team and EngineeringHoursPerScooter hours with the engineering team. Each bike requires DesignHoursPerBike hours with the design team and EngineeringHoursPerBike hours with the engineering team. The company has TotalDesignHoursAvailable design hours and TotalEngineeringHoursAvailable engineering hours available each month. Determine the number of scooters and bikes the company should produce each month to maximize profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "ProfitPerScooter": {
            "description": "Profit per scooter",
            "shape": []
        },
        "ProfitPerBike": {
            "description": "Profit per bike",
            "shape": []
        },
        "DesignHoursPerScooter": {
            "description": "Design hours required per scooter",
            "shape": []
        },
        "DesignHoursPerBike": {
            "description": "Design hours required per bike",
            "shape": []
        },
        "EngineeringHoursPerScooter": {
            "description": "Engineering hours required per scooter",
            "shape": []
        },
        "EngineeringHoursPerBike": {
            "description": "Engineering hours required per bike",
            "shape": []
        },
        "TotalDesignHoursAvailable": {
            "description": "Total design hours available per month",
            "shape": []
        },
        "TotalEngineeringHoursAvailable": {
            "description": "Total engineering hours available per month",
            "shape": []
        }
    },
    "variables": {
        "NumberOfScooters": {
            "description": "The number of scooters to be produced",
            "type": "continuous",
            "shape": []
        },
        "NumberOfBikes": {
            "description": "The number of bikes to be produced",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "DesignHoursPerScooter * NumberOfScooters + DesignHoursPerBike * NumberOfBikes \u2264 TotalDesignHoursAvailable",
            "formulation": "DesignHoursPerScooter \\times NumberOfScooters + DesignHoursPerBike \\times NumberOfBikes \\leq TotalDesignHoursAvailable",
            "code": {
                "gurobipy": "model.addConstr(DesignHoursPerScooter * NumberOfScooters + DesignHoursPerBike * NumberOfBikes <= TotalDesignHoursAvailable)"
            }
        },
        {
            "description": "EngineeringHoursPerScooter * NumberOfScooters + EngineeringHoursPerBike * NumberOfBikes \u2264 TotalEngineeringHoursAvailable",
            "formulation": "EngineeringHoursPerScooter \\times NumberOfScooters + EngineeringHoursPerBike \\times NumberOfBikes \\leq TotalEngineeringHoursAvailable",
            "code": {
                "gurobipy": "model.addConstr(EngineeringHoursPerScooter * NumberOfScooters + EngineeringHoursPerBike * NumberOfBikes <= TotalEngineeringHoursAvailable)"
            }
        }
    ],
    "objective": {
        "description": "Maximize total profit, which is ProfitPerScooter * NumberOfScooters + ProfitPerBike * NumberOfBikes",
        "formulation": "Max \\ ProfitPerScooter \\times NumberOfScooters + ProfitPerBike \\times NumberOfBikes",
        "code": {
            "gurobipy": "model.setObjective(ProfitPerScooter * NumberOfScooters + ProfitPerBike * NumberOfBikes, GRB.MAXIMIZE)"
        }
    }
}