{
    "parametrized_description": "A coffee shop produces two products, Mochas and Regular Coffees. Each Mocha requires CoffeePowderPerMocha units of coffee powder and MilkPerMocha units of milk. Each Regular Coffee requires CoffeePowderPerRegularCoffee units of coffee powder and MilkPerRegularCoffee units of milk. The shop has AvailableCoffeePowder units of coffee powder and AvailableMilk units of milk available. Producing one Mocha takes TimePerMocha minutes and one Regular Coffee takes TimePerRegularCoffee minutes. The number of Mochas produced must be at least MochaToRegularRatio times the number of Regular Coffees produced. Determine the number of Mochas and Regular Coffees to produce to minimize the total production time.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CoffeePowderPerMocha": {
            "description": "Amount of coffee powder required to produce one mocha",
            "shape": []
        },
        "MilkPerMocha": {
            "description": "Amount of milk required to produce one mocha",
            "shape": []
        },
        "CoffeePowderPerRegularCoffee": {
            "description": "Amount of coffee powder required to produce one regular coffee",
            "shape": []
        },
        "MilkPerRegularCoffee": {
            "description": "Amount of milk required to produce one regular coffee",
            "shape": []
        },
        "AvailableCoffeePowder": {
            "description": "Total available units of coffee powder",
            "shape": []
        },
        "AvailableMilk": {
            "description": "Total available units of milk",
            "shape": []
        },
        "TimePerMocha": {
            "description": "Time taken to produce one mocha",
            "shape": []
        },
        "TimePerRegularCoffee": {
            "description": "Time taken to produce one regular coffee",
            "shape": []
        },
        "MochaToRegularRatio": {
            "description": "Minimum multiple of mochas required compared to regular coffees",
            "shape": []
        }
    },
    "variables": {
        "NumMocha": {
            "description": "The number of Mochas produced",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumRegularCoffee": {
            "description": "The number of Regular Coffees produced",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total coffee powder used by Mochas and Regular Coffees does not exceed AvailableCoffeePowder.",
            "formulation": "CoffeePowderPerMocha \\cdot NumMocha + CoffeePowderPerRegularCoffee \\cdot NumRegularCoffee \\leq AvailableCoffeePowder",
            "code": {
                "gurobipy": "model.addConstr(CoffeePowderPerMocha * NumMocha + CoffeePowderPerRegularCoffee * NumRegularCoffee <= AvailableCoffeePowder)"
            }
        },
        {
            "description": "The total milk used by Mochas and Regular Coffees does not exceed AvailableMilk.",
            "formulation": "MilkPerMocha \\times NumMocha + MilkPerRegularCoffee \\times NumRegularCoffee \\leq AvailableMilk",
            "code": {
                "gurobipy": "model.addConstr(MilkPerMocha * NumMocha + MilkPerRegularCoffee * NumRegularCoffee <= AvailableMilk)"
            }
        },
        {
            "description": "The number of Mochas produced is at least MochaToRegularRatio times the number of Regular Coffees produced.",
            "formulation": "NumMocha \\geq MochaToRegularRatio \\times NumRegularCoffee",
            "code": {
                "gurobipy": "model.addConstr(NumMocha >= MochaToRegularRatio * NumRegularCoffee)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total production time, which is the sum of (TimePerMocha \u00d7 number of Mochas) and (TimePerRegularCoffee \u00d7 number of Regular Coffees).",
        "formulation": "Min\\ TimePerMocha \\times NumMocha + TimePerRegularCoffee \\times NumRegularCoffee",
        "code": {
            "gurobipy": "model.setObjective(TimePerMocha * NumMocha + TimePerRegularCoffee * NumRegularCoffee, GRB.MINIMIZE)"
        }
    }
}