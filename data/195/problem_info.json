{
    "parametrized_description": "Minimize CostProteinBars * x + CostNoodles * y subject to CaloriesProteinBars * x + CaloriesNoodles * y \u2265 MinCalories and ProteinProteinBars * x + ProteinNoodles * y \u2265 MinProtein, where x and y are non-negative variables representing the number of servings of protein bars and noodles respectively.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CostNoodles": {
            "description": "Cost per serving of noodles",
            "shape": []
        },
        "CostProteinBars": {
            "description": "Cost per serving of protein bars",
            "shape": []
        },
        "CaloriesNoodles": {
            "description": "Calories per serving of noodles",
            "shape": []
        },
        "CaloriesProteinBars": {
            "description": "Calories per serving of protein bars",
            "shape": []
        },
        "ProteinNoodles": {
            "description": "Protein per serving of noodles",
            "shape": []
        },
        "ProteinProteinBars": {
            "description": "Protein per serving of protein bars",
            "shape": []
        },
        "MinCalories": {
            "description": "Minimum required calories per day",
            "shape": []
        },
        "MinProtein": {
            "description": "Minimum required protein per day",
            "shape": []
        }
    },
    "variables": {
        "ServingsNoodles": {
            "description": "The number of servings of noodles",
            "type": "continuous",
            "shape": []
        },
        "ServingsProteinBars": {
            "description": "The number of servings of protein bars",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total calories from protein bars and noodles must be at least MinCalories.",
            "formulation": "CaloriesNoodles \\cdot ServingsNoodles + CaloriesProteinBars \\cdot ServingsProteinBars \\geq MinCalories",
            "code": {
                "gurobipy": "model.addConstr(CaloriesNoodles * ServingsNoodles + CaloriesProteinBars * ServingsProteinBars >= MinCalories)"
            }
        },
        {
            "description": "The total protein from protein bars and noodles must be at least MinProtein.",
            "formulation": "ProteinNoodles \\times ServingsNoodles + ProteinProteinBars \\times ServingsProteinBars \\geq MinProtein",
            "code": {
                "gurobipy": "model.addConstr(ProteinNoodles * ServingsNoodles + ProteinProteinBars * ServingsProteinBars >= MinProtein)"
            }
        }
    ],
    "objective": {
        "description": "The objective is to minimize the total cost of protein bars and noodles while meeting the minimum daily calorie and protein requirements.",
        "formulation": "Min CostNoodles \\times ServingsNoodles + CostProteinBars \\times ServingsProteinBars",
        "code": {
            "gurobipy": "model.setObjective(CostNoodles * ServingsNoodles + CostProteinBars * ServingsProteinBars, GRB.MINIMIZE)"
        }
    }
}