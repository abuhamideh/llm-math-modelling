{
    "parametrized_description": "Ayse produces a plant growth compound by mixing NumFertilizers different types of fertilizer. The compound must contain at least RequiredNitrousOxide units of nitrous oxide and at least RequiredVitaminMix units of vitamin mix. Each fertilizer has a cost per kilogram given by CostFertilizer, contains NitrousOxidePerFertilizer units of nitrous oxide per kilogram, and VitaminMixPerFertilizer units of vitamin mix per kilogram. Determine the minimum cost of Ayse's compound.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFertilizers": {
            "description": "Number of different fertilizers used in the compound",
            "shape": []
        },
        "CostFertilizer": {
            "description": "Cost per kilogram of each fertilizer",
            "shape": [
                "NumFertilizers"
            ]
        },
        "NitrousOxidePerFertilizer": {
            "description": "Units of nitrous oxide per kilogram of each fertilizer",
            "shape": [
                "NumFertilizers"
            ]
        },
        "VitaminMixPerFertilizer": {
            "description": "Units of vitamin mix per kilogram of each fertilizer",
            "shape": [
                "NumFertilizers"
            ]
        },
        "RequiredNitrousOxide": {
            "description": "Minimum required units of nitrous oxide in the compound",
            "shape": []
        },
        "RequiredVitaminMix": {
            "description": "Minimum required units of vitamin mix in the compound",
            "shape": []
        }
    },
    "variables": {
        "FertilizerQuantity": {
            "description": "The quantity of each fertilizer used in the compound",
            "type": "continuous",
            "shape": [
                "NumFertilizers"
            ]
        }
    },
    "constraints": [
        {
            "description": "The compound must contain at least RequiredNitrousOxide units of nitrous oxide.",
            "formulation": "\\sum_{i=1}^{NumFertilizers} NitrousOxidePerFertilizer_{i} \\cdot FertilizerQuantity_{i} \\geq RequiredNitrousOxide",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NitrousOxidePerFertilizer[i] * FertilizerQuantity[i] for i in range(NumFertilizers)) >= RequiredNitrousOxide)"
            }
        },
        {
            "description": "The compound must contain at least RequiredVitaminMix units of vitamin mix.",
            "formulation": "\\sum_{i=1}^{NumFertilizers} VitaminMixPerFertilizer_i \\cdot FertilizerQuantity_i \\geq RequiredVitaminMix",
            "code": {
                "gurobipy": "model.addConstr(quicksum(VitaminMixPerFertilizer[i] * FertilizerQuantity[i] for i in range(NumFertilizers)) >= RequiredVitaminMix)"
            }
        },
        {
            "description": "The amount of each fertilizer used must be non-negative.",
            "formulation": "FertilizerQuantity \\geq 0",
            "code": {
                "gurobipy": "model.addConstrs((FertilizerQuantity[k] >= 0 for k in range(NumFertilizers)), name=\"NonNegativeFertilizerQuantity\")"
            }
        }
    ],
    "objective": {
        "description": "The total cost of the compound is the sum of the cost per kilogram of each fertilizer multiplied by the amount used. The objective is to minimize the total cost of the compound.",
        "formulation": "Min \\sum_{i=1}^{NumFertilizers} CostFertilizer_i \\cdot FertilizerQuantity_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(CostFertilizer[i] * FertilizerQuantity[i] for i in range(NumFertilizers)), GRB.MINIMIZE)"
        }
    }
}