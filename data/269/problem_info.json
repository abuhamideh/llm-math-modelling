{
    "parametrized_description": "A dessert shop produces NumDessertTypes different desserts using NumIngredients different ingredients. The ResourceUsage matrix specifies the amount of each ingredient required per dessert. The shop must produce more of one dessert type than another and ensure that at least a proportion MinMatchaProportion of the total desserts are of a specific type. The total usage of each ingredient must not exceed AvailableIngredients. The objective is to minimize the total amount of flavouring required.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumDessertTypes": {
            "description": "Number of different dessert types",
            "shape": []
        },
        "NumIngredients": {
            "description": "Number of different ingredients",
            "shape": []
        },
        "ResourceUsage": {
            "description": "Amount of each ingredient required to produce one unit of each dessert",
            "shape": [
                "NumIngredients",
                "NumDessertTypes"
            ]
        },
        "AvailableIngredients": {
            "description": "Total available units of each ingredient",
            "shape": [
                "NumIngredients"
            ]
        },
        "MinMatchaProportion": {
            "description": "Minimum proportion of desserts that must be matcha ice cream",
            "shape": []
        }
    },
    "variables": {
        "MatchaIceCream": {
            "description": "The number of matcha ice cream desserts produced",
            "type": "continuous",
            "shape": []
        },
        "OrangeSorbet": {
            "description": "The number of orange sorbet desserts produced",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of matcha ice cream desserts produced must be greater than the number of orange sorbet desserts produced.",
            "formulation": "MatchaIceCream \\geq OrangeSorbet",
            "code": {
                "gurobipy": "model.addConstr(MatchaIceCream >= OrangeSorbet)"
            }
        },
        {
            "description": "At least a proportion MinMatchaProportion of the total desserts must be matcha ice cream.",
            "formulation": "MatchaIceCream \\geq MinMatchaProportion \\times (MatchaIceCream + OrangeSorbet)",
            "code": {
                "gurobipy": "model.addConstr(MatchaIceCream >= MinMatchaProportion * (MatchaIceCream + OrangeSorbet))"
            }
        },
        {
            "description": "The total usage of each ingredient must not exceed AvailableIngredients.",
            "formulation": "\\text{ResourceUsage}_{i,1} \\times \\text{MatchaIceCream} + \\text{ResourceUsage}_{i,2} \\times \\text{OrangeSorbet} \\leq \\text{AvailableIngredients}_i, \\quad \\forall i \\in \\{1, \\dots, \\text{NumIngredients}\\}",
            "code": {
                "gurobipy": "for i in range(NumIngredients):\n    model.addConstr(ResourceUsage[i][0] * MatchaIceCream + ResourceUsage[i][1] * OrangeSorbet <= AvailableIngredients[i])"
            }
        }
    ],
    "objective": {
        "description": "The objective is to minimize the total amount of flavouring required.",
        "formulation": "Min \\sum_{i=1}^{NumIngredients} \\left( ResourceUsage_{i, \\text{MatchaIceCream}} \\cdot \\text{MatchaIceCream} + ResourceUsage_{i, \\text{OrangeSorbet}} \\cdot \\text{OrangeSorbet} \\right)",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ResourceUsage[i, 0] * MatchaIceCream + ResourceUsage[i, 1] * OrangeSorbet for i in range(NumIngredients)), GRB.MINIMIZE)"
        }
    }
}