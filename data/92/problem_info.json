{
    "parametrized_description": "The summer camp uses NumBeakers different types of beakers. Each beaker type i consumes FlourUsagePerBeaker[i] units of flour and SpecialLiquidUsagePerBeaker[i] units of special liquid to produce SlimeProducedPerBeaker[i] units of slime and WasteProducedPerBeaker[i] units of waste. The camp has FlourAvailable units of flour and SpecialLiquidAvailable units of special liquid available. The total waste produced must not exceed MaxWasteAllowed. The goal is to determine how many beakers of each type to use to maximize the total amount of slime produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumBeakers": {
            "description": "Number of beakers",
            "shape": []
        },
        "FlourAvailable": {
            "description": "Amount of flour available",
            "shape": []
        },
        "SpecialLiquidAvailable": {
            "description": "Amount of special liquid available",
            "shape": []
        },
        "MaxWasteAllowed": {
            "description": "Maximum amount of waste allowed",
            "shape": []
        },
        "FlourUsagePerBeaker": {
            "description": "Amount of flour used by each beaker",
            "shape": [
                "NumBeakers"
            ]
        },
        "SpecialLiquidUsagePerBeaker": {
            "description": "Amount of special liquid used by each beaker",
            "shape": [
                "NumBeakers"
            ]
        },
        "SlimeProducedPerBeaker": {
            "description": "Amount of slime produced by each beaker",
            "shape": [
                "NumBeakers"
            ]
        },
        "WasteProducedPerBeaker": {
            "description": "Amount of waste produced by each beaker",
            "shape": [
                "NumBeakers"
            ]
        }
    },
    "variables": {
        "FlourUsedPerBeaker": {
            "description": "The amount of flour used by beaker i",
            "type": "continuous",
            "shape": [
                "NumBeakers"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total amount of flour used by all beakers does not exceed FlourAvailable.",
            "formulation": "\\sum_{i=1}^{\\text{NumBeakers}} \\text{FlourUsedPerBeaker}_i \\leq \\text{FlourAvailable}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(FlourUsedPerBeaker[i] for i in range(NumBeakers)) <= FlourAvailable)"
            }
        },
        {
            "description": "The total amount of special liquid used by all beakers does not exceed SpecialLiquidAvailable.",
            "formulation": "\\sum_{i=1}^{NumBeakers} SpecialLiquidUsagePerBeaker_i \\cdot FlourUsedPerBeaker_i \\leq SpecialLiquidAvailable",
            "code": {
                "gurobipy": "model.addConstr(quicksum(SpecialLiquidUsagePerBeaker[i] * FlourUsedPerBeaker[i] for i in range(NumBeakers)) <= SpecialLiquidAvailable)"
            }
        },
        {
            "description": "The total amount of waste produced by all beakers does not exceed MaxWasteAllowed.",
            "formulation": "\\sum_{i=1}^{\\text{NumBeakers}} WasteProducedPerBeaker_i \\cdot FlourUsedPerBeaker_i \\leq MaxWasteAllowed",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WasteProducedPerBeaker[i] * FlourUsedPerBeaker[i] for i in range(NumBeakers)) <= MaxWasteAllowed)"
            }
        }
    ],
    "objective": {
        "description": "The total amount of slime produced by all beakers is maximized.",
        "formulation": "Max \\sum_{i=1}^{NumBeakers} SlimeProducedPerBeaker_i \\cdot FlourUsedPerBeaker_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(SlimeProducedPerBeaker[i] * FlourUsedPerBeaker[i] for i in range(NumBeakers)), GRB.MAXIMIZE)"
        }
    }
}