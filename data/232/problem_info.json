{
    "parametrized_description": "A fitness guru consumes NumFoodTypes different types of meals. Each bowl of the i-th meal contains CaloriePerBowl[i] calories, ProteinPerBowl[i] grams of protein, and SodiumPerBowl[i] mg of sodium. No more than MaxMealProportionEggs proportion of the meals can be eggs. The fitness guru needs to consume at least MinCalories total calories and at least MinProtein total grams of protein. The objective is to determine the number of bowls of each meal type to minimize total sodium intake.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFoodTypes": {
            "description": "Number of food types",
            "shape": []
        },
        "CaloriePerBowl": {
            "description": "Calorie content per bowl for each food type",
            "shape": [
                "NumFoodTypes"
            ]
        },
        "ProteinPerBowl": {
            "description": "Protein content per bowl for each food type",
            "shape": [
                "NumFoodTypes"
            ]
        },
        "SodiumPerBowl": {
            "description": "Sodium content per bowl for each food type",
            "shape": [
                "NumFoodTypes"
            ]
        },
        "MaxMealProportionEggs": {
            "description": "Maximum proportion of meals that can be eggs",
            "shape": []
        },
        "MinCalories": {
            "description": "Minimum total calories required",
            "shape": []
        },
        "MinProtein": {
            "description": "Minimum total protein required",
            "shape": []
        }
    },
    "variables": {
        "NumMealsPerFoodType": {
            "description": "The number of meals for each food type",
            "type": "continuous",
            "shape": [
                "NumFoodTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "No more than MaxMealProportionEggs proportion of the meals can be eggs.",
            "formulation": "NumMealsPerFoodType_{1} \\leq MaxMealProportionEggs \\cdot \\sum_{i=1}^{NumFoodTypes} NumMealsPerFoodType_i",
            "code": {
                "gurobipy": "model.addConstr(NumMealsPerFoodType[0] <= MaxMealProportionEggs * quicksum(NumMealsPerFoodType[i] for i in range(NumFoodTypes)))"
            }
        },
        {
            "description": "The total caloric intake must be at least MinCalories.",
            "formulation": "\\sum_{i=1}^{NumFoodTypes} NumMealsPerFoodType_i \\times CaloriePerBowl_i \\geq MinCalories",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumMealsPerFoodType[i] * CaloriePerBowl[i] for i in range(NumFoodTypes)) >= MinCalories)"
            }
        },
        {
            "description": "The total protein intake must be at least MinProtein.",
            "formulation": "\\sum_{i=1}^{\\text{NumFoodTypes}} ProteinPerBowl_i \\times NumMealsPerFoodType_i \\geq MinProtein",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ProteinPerBowl[i] * NumMealsPerFoodType[i] for i in range(NumFoodTypes)) >= MinProtein)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total sodium intake.",
        "formulation": "Min \\sum_{i=1}^{NumFoodTypes} SodiumPerBowl_i \\times NumMealsPerFoodType_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(SodiumPerBowl[i] * NumMealsPerFoodType[i] for i in range(NumFoodTypes)), GRB.MINIMIZE)"
        }
    }
}