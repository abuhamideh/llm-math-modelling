{
    "parametrized_description": "Use a number of vans and minibuses, where each van can transport VanCapacity children and generates VanPollution pollution, and each minibus can transport MinibusCapacity children and generates MinibusPollution pollution. The constraints are that at least MinimumNumberOfKids children must be transported, no more than MaximumNumberOfMinibuses minibuses can be used, and the number of vans must exceed the number of minibuses. The goal is to minimize the total pollution generated.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "VanCapacity": {
            "description": "Number of kids a van can take",
            "shape": []
        },
        "VanPollution": {
            "description": "Pollution produced by one van",
            "shape": []
        },
        "MinibusCapacity": {
            "description": "Number of kids a minibus can take",
            "shape": []
        },
        "MinibusPollution": {
            "description": "Pollution produced by one minibus",
            "shape": []
        },
        "MinimumNumberOfKids": {
            "description": "Minimum number of kids that need to go to school",
            "shape": []
        },
        "MaximumNumberOfMinibuses": {
            "description": "Maximum number of minibuses that can be used",
            "shape": []
        }
    },
    "variables": {
        "NumberOfVans": {
            "description": "The number of vans used",
            "type": "continuous",
            "shape": []
        },
        "NumberOfMinibuses": {
            "description": "The number of minibuses used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of children transported by vans and minibuses must be at least MinimumNumberOfKids.",
            "formulation": "NumberOfVans \\times VanCapacity + NumberOfMinibuses \\times MinibusCapacity \\geq MinimumNumberOfKids",
            "code": {
                "gurobipy": "model.addConstr(NumberOfVans * VanCapacity + NumberOfMinibuses * MinibusCapacity >= MinimumNumberOfKids)"
            }
        },
        {
            "description": "No more than MaximumNumberOfMinibuses minibuses can be used.",
            "formulation": "NumberOfMinibuses \\leq MaximumNumberOfMinibuses",
            "code": {
                "gurobipy": "model.addConstr(NumberOfMinibuses <= MaximumNumberOfMinibuses)"
            }
        },
        {
            "description": "The number of vans used must exceed the number of minibuses used.",
            "formulation": "NumberOfVans \\geq NumberOfMinibuses + 1",
            "code": {
                "gurobipy": "model.addConstr(NumberOfVans >= NumberOfMinibuses + 1)"
            }
        }
    ],
    "objective": {
        "description": "The total pollution is the sum of the pollution generated by all vans and minibuses used. The objective is to minimize the total pollution.",
        "formulation": "Min \\; NumberOfVans \\times VanPollution + NumberOfMinibuses \\times MinibusPollution",
        "code": {
            "gurobipy": "model.setObjective(NumberOfVans * VanPollution + NumberOfMinibuses * MinibusPollution, GRB.MINIMIZE)"
        }
    }
}