# Code automatically generated from OptiMUS

# Problem type: MIP        
# Problem description
'''
Use a number of vans and minibuses, where each van can transport VanCapacity
children and generates VanPollution pollution, and each minibus can transport
MinibusCapacity children and generates MinibusPollution pollution. The
constraints are that at least MinimumNumberOfKids children must be transported,
no more than MaximumNumberOfMinibuses minibuses can be used, and the number of
vans must exceed the number of minibuses. The goal is to minimize the total
pollution generated.
'''
# Import necessary libraries
import json
from gurobipy import *
     
# Create a new model
model = Model()

# Load data 
with open("/Users/gaowenzhi/Desktop/optimus-OR-paper/data/new_dataset/sample_datasets/163/parameters.json", "r") as f:
    data = json.load(f)
    
# @Def: definition of a target
# @Shape: shape of a target
        
# Parameters 
# @Parameter VanCapacity @Def: Number of kids a van can take @Shape: [] 
VanCapacity = data['VanCapacity']
# @Parameter VanPollution @Def: Pollution produced by one van @Shape: [] 
VanPollution = data['VanPollution']
# @Parameter MinibusCapacity @Def: Number of kids a minibus can take @Shape: [] 
MinibusCapacity = data['MinibusCapacity']
# @Parameter MinibusPollution @Def: Pollution produced by one minibus @Shape: [] 
MinibusPollution = data['MinibusPollution']
# @Parameter MinimumNumberOfKids @Def: Minimum number of kids that need to go to school @Shape: [] 
MinimumNumberOfKids = data['MinimumNumberOfKids']
# @Parameter MaximumNumberOfMinibuses @Def: Maximum number of minibuses that can be used @Shape: [] 
MaximumNumberOfMinibuses = data['MaximumNumberOfMinibuses']

# Variables 
# @Variable NumberOfVans @Def: The number of vans used @Shape: [] 
NumberOfVans = model.addVar(vtype=GRB.INTEGER, name="NumberOfVans")
# @Variable NumberOfMinibuses @Def: The number of minibuses used @Shape: [] 
NumberOfMinibuses = model.addVar(vtype=GRB.INTEGER, lb=0, ub=MaximumNumberOfMinibuses, name="NumberOfMinibuses")

# Constraints 
# @Constraint Constr_1 @Def: The total number of children transported by vans and minibuses must be at least MinimumNumberOfKids.
model.addConstr(NumberOfVans * VanCapacity + NumberOfMinibuses * MinibusCapacity >= MinimumNumberOfKids)
# @Constraint Constr_2 @Def: No more than MaximumNumberOfMinibuses minibuses can be used.
model.addConstr(NumberOfMinibuses <= MaximumNumberOfMinibuses)
# @Constraint Constr_3 @Def: The number of vans used must exceed the number of minibuses used.
model.addConstr(NumberOfVans >= NumberOfMinibuses + 1)

# Objective 
# @Objective Objective @Def: The total pollution is the sum of the pollution generated by all vans and minibuses used. The objective is to minimize the total pollution.
model.setObjective(NumberOfVans * VanPollution + NumberOfMinibuses * MinibusPollution, GRB.MINIMIZE)

# Solve 
model.optimize()

# Extract solution 
solution = {}
variables = {}
objective = []
variables['NumberOfVans'] = NumberOfVans.x
variables['NumberOfMinibuses'] = NumberOfMinibuses.x
solution['variables'] = variables
solution['objective'] = model.objVal
with open('solution.json', 'w') as f:
    json.dump(solution, f, indent=4)
