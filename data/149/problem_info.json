{
    "parametrized_description": "A company utilizes NumVehicleTypes different vehicle types to transport patties. Each vehicle type i has a Capacity[i] capacity for patties and incurs a CostPerTrip[i] cost per trip. The number of vehicles of one type must not exceed the number of vehicles of another type. The company must transport at least MinPatties patties while staying within a Budget. The objective is to minimize the total number of trips.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumVehicleTypes": {
            "description": "Number of vehicle types",
            "shape": []
        },
        "Capacity": {
            "description": "Capacity of each vehicle type in number of patties",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "CostPerTrip": {
            "description": "Cost per trip for each vehicle type",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "MinPatties": {
            "description": "Minimum number of patties to be shipped",
            "shape": []
        },
        "Budget": {
            "description": "Budget for shipping",
            "shape": []
        }
    },
    "variables": {
        "NumTrips": {
            "description": "The number of trips for each vehicle type",
            "type": "continuous",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "NumVehicles": {
            "description": "The number of vehicles for each vehicle type",
            "type": "continuous",
            "shape": [
                "NumVehicleTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "At least MinPatties patties must be transported.",
            "formulation": "\\sum_{i=1}^{NumVehicleTypes} Capacity_i \\cdot NumTrips_i \\geq MinPatties",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Capacity[i] * NumTrips[i] for i in range(NumVehicleTypes)) >= MinPatties)"
            }
        },
        {
            "description": "The total cost of all trips must not exceed the Budget.",
            "formulation": "\\sum_{i=1}^{NumVehicleTypes} NumTrips_i \\cdot CostPerTrip_i \\leq Budget",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumTrips[i] * CostPerTrip[i] for i in range(NumVehicleTypes)) <= Budget)"
            }
        },
        {
            "description": "The number of vehicles of one vehicle type must not exceed the number of vehicles of another vehicle type.",
            "formulation": "NumVehicles_i \\leq NumVehicles_j",
            "code": {
                "gurobipy": "model.addConstr(NumVehicles[i] <= NumVehicles[j], name=\"Vehicles_Constraint\")"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of trips required to transport the patties.",
        "formulation": "Min \\sum_{i=1}^{NumVehicleTypes} NumTrips_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(NumTrips[i] for i in range(NumVehicleTypes)), GRB.MINIMIZE)"
        }
    }
}