# Code automatically generated from OptiMUS

# Problem type: LP        
# Problem description
'''
A tea estate has TotalAcres of land and needs to pick tea leaves using
NumMachineTypes machine types. For each acre, the i-th machine can pick
PickRate[i] amount of tea leaves, creates WasteRate[i] amount of waste, and
requires FuelRate[i] amount of fuel. The estate has TotalFuel available fuel and
can handle at most MaxWaste waste. Determine how many acres each machine should
be used to maximize the amount of tea leaves picked.
'''
# Import necessary libraries
import json
from gurobipy import *
     
# Create a new model
model = Model()

# Load data 
with open("/Users/gaowenzhi/Desktop/optimus-OR-paper/data/new_dataset/sample_datasets/65/parameters.json", "r") as f:
    data = json.load(f)
    
# @Def: definition of a target
# @Shape: shape of a target            
        
# Parameters 
# @Parameter TotalAcres @Def: Total available land in acres @Shape: [] 
TotalAcres = data['TotalAcres']
# @Parameter TotalFuel @Def: Total available fuel in liters @Shape: [] 
TotalFuel = data['TotalFuel']
# @Parameter MaxWaste @Def: Maximum allowable waste in kilograms @Shape: [] 
MaxWaste = data['MaxWaste']
# @Parameter NumMachineTypes @Def: Number of machine types @Shape: [] 
NumMachineTypes = data['NumMachineTypes']
# @Parameter PickRate @Def: Amount of tea leaves picked per acre by each machine type @Shape: ['NumMachineTypes'] 
PickRate = data['PickRate']
# @Parameter WasteRate @Def: Amount of waste created per acre by each machine type @Shape: ['NumMachineTypes'] 
WasteRate = data['WasteRate']
# @Parameter FuelRate @Def: Amount of fuel required per acre by each machine type @Shape: ['NumMachineTypes'] 
FuelRate = data['FuelRate']
    
# Variables 
# @Variable AcresUsed @Def: The number of acres used by each machine type @Shape: ['NumMachineTypes'] 
AcresUsed = model.addVars(NumMachineTypes, vtype=GRB.CONTINUOUS, name="AcresUsed")
    
# Constraints 
# @Constraint Constr_1 @Def: The total fuel used by all machine types cannot exceed TotalFuel.
model.addConstr(quicksum(FuelRate[i] * AcresUsed[i] for i in range(NumMachineTypes)) <= TotalFuel)
# @Constraint Constr_2 @Def: The total waste generated by all machine types cannot exceed MaxWaste.
model.addConstr(quicksum(WasteRate[i] * AcresUsed[i] for i in range(NumMachineTypes)) <= MaxWaste)
# @Constraint Constr_3 @Def: The total acres allocated to all machine types cannot exceed TotalAcres.
model.addConstr(quicksum(AcresUsed[m] for m in range(NumMachineTypes)) <= TotalAcres)
    
# Objective 
# @Objective Objective @Def: The amount of tea leaves picked is the sum of PickRate[i] multiplied by the number of acres allocated to each machine type. The objective is to maximize the amount of tea leaves picked.
model.setObjective(quicksum(PickRate[i] * AcresUsed[i] for i in range(NumMachineTypes)), GRB.MAXIMIZE)
    
# Solve 
model.optimize()
    
# Extract solution 
solution = {}
variables = {}
objective = []
variables['AcresUsed'] = [AcresUsed[i].X for i in range(NumMachineTypes)]
solution['variables'] = variables
solution['objective'] = model.objVal
with open('solution.json', 'w') as f:
    json.dump(solution, f, indent=4)