{
    "parametrized_description": "A tea estate has TotalAcres of land and needs to pick tea leaves using NumMachineTypes machine types. For each acre, the i-th machine can pick PickRate[i] amount of tea leaves, creates WasteRate[i] amount of waste, and requires FuelRate[i] amount of fuel. The estate has TotalFuel available fuel and can handle at most MaxWaste waste. Determine how many acres each machine should be used to maximize the amount of tea leaves picked.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TotalAcres": {
            "description": "Total available land in acres",
            "shape": []
        },
        "TotalFuel": {
            "description": "Total available fuel in liters",
            "shape": []
        },
        "MaxWaste": {
            "description": "Maximum allowable waste in kilograms",
            "shape": []
        },
        "NumMachineTypes": {
            "description": "Number of machine types",
            "shape": []
        },
        "PickRate": {
            "description": "Amount of tea leaves picked per acre by each machine type",
            "shape": [
                "NumMachineTypes"
            ]
        },
        "WasteRate": {
            "description": "Amount of waste created per acre by each machine type",
            "shape": [
                "NumMachineTypes"
            ]
        },
        "FuelRate": {
            "description": "Amount of fuel required per acre by each machine type",
            "shape": [
                "NumMachineTypes"
            ]
        }
    },
    "variables": {
        "AcresUsed": {
            "description": "The number of acres used by each machine type",
            "type": "continuous",
            "shape": [
                "NumMachineTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total fuel used by all machine types cannot exceed TotalFuel.",
            "formulation": "\\sum_{i=1}^{\\text{NumMachineTypes}} FuelRate_i \\times AcresUsed_i \\leq TotalFuel",
            "code": {
                "gurobipy": "model.addConstr(quicksum(FuelRate[i] * AcresUsed[i] for i in range(NumMachineTypes)) <= TotalFuel)"
            }
        },
        {
            "description": "The total waste generated by all machine types cannot exceed MaxWaste.",
            "formulation": "\\sum_{i=1}^{NumMachineTypes} WasteRate_i \\cdot AcresUsed_i \\leq MaxWaste",
            "code": {
                "gurobipy": "model.addConstr(quicksum(WasteRate[i] * AcresUsed[i] for i in range(NumMachineTypes)) <= MaxWaste)"
            }
        },
        {
            "description": "The total acres allocated to all machine types cannot exceed TotalAcres.",
            "formulation": "\\sum_{m=1}^{\\text{NumMachineTypes}} \\text{AcresUsed}_m \\leq \\text{TotalAcres}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(AcresUsed[m] for m in range(NumMachineTypes)) <= TotalAcres)"
            }
        }
    ],
    "objective": {
        "description": "The amount of tea leaves picked is the sum of PickRate[i] multiplied by the number of acres allocated to each machine type. The objective is to maximize the amount of tea leaves picked.",
        "formulation": "Max \\sum_{i=1}^{NumMachineTypes} PickRate_i \\times AcresUsed_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(PickRate[i] * AcresUsed[i] for i in range(NumMachineTypes)), GRB.MAXIMIZE)"
        }
    }
}