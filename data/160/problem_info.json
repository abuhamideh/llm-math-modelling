{
    "parametrized_description": "A snack exporter must determine the number of small and large suitcases to send in order to maximize the total number of snacks delivered. Each small suitcase has a capacity of SmallSuitcaseCapacity snacks, and each large suitcase has a capacity of LargeSuitcaseCapacity snacks. The number of small suitcases used must be at least MinSmallToLargeRatio times the number of large suitcases. The exporter is limited by MaxSmallSuitcases available small suitcases and MaxLargeSuitcases available large suitcases. Additionally, the exporter must send at least MinLargeSuitcases large suitcases and ensure that the total number of suitcases sent does not exceed MaxTotalSuitcases.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallSuitcaseCapacity": {
            "description": "Capacity of a small suitcase in snacks",
            "shape": []
        },
        "LargeSuitcaseCapacity": {
            "description": "Capacity of a large suitcase in snacks",
            "shape": []
        },
        "MinSmallToLargeRatio": {
            "description": "Minimum ratio factor indicating that the number of small suitcases must be at least twice the number of large suitcases",
            "shape": []
        },
        "MaxSmallSuitcases": {
            "description": "Maximum number of small suitcases available",
            "shape": []
        },
        "MaxLargeSuitcases": {
            "description": "Maximum number of large suitcases available",
            "shape": []
        },
        "MinLargeSuitcases": {
            "description": "Minimum number of large suitcases to send",
            "shape": []
        },
        "MaxTotalSuitcases": {
            "description": "Maximum total number of suitcases to send",
            "shape": []
        }
    },
    "variables": {
        "SmallSuitcasesUsed": {
            "description": "The number of small suitcases used",
            "type": "continuous",
            "shape": []
        },
        "LargeSuitcasesUsed": {
            "description": "The number of large suitcases used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of small suitcases used must be at least MinSmallToLargeRatio times the number of large suitcases.",
            "formulation": "SmallSuitcasesUsed \\geq MinSmallToLargeRatio \\times LargeSuitcasesUsed",
            "code": {
                "gurobipy": "model.addConstr(SmallSuitcasesUsed >= MinSmallToLargeRatio * LargeSuitcasesUsed)"
            }
        },
        {
            "description": "The number of small suitcases sent cannot exceed MaxSmallSuitcases.",
            "formulation": "SmallSuitcasesUsed \\leq MaxSmallSuitcases",
            "code": {
                "gurobipy": "model.addConstr(SmallSuitcasesUsed <= MaxSmallSuitcases)"
            }
        },
        {
            "description": "The number of large suitcases sent cannot exceed MaxLargeSuitcases.",
            "formulation": "LargeSuitcasesUsed \\leq MaxLargeSuitcases",
            "code": {
                "gurobipy": "model.addConstr(LargeSuitcasesUsed <= MaxLargeSuitcases)"
            }
        },
        {
            "description": "At least MinLargeSuitcases large suitcases must be sent.",
            "formulation": "LargeSuitcasesUsed \\geq MinLargeSuitcases",
            "code": {
                "gurobipy": "# The constraint 'LargeSuitcasesUsed >= MinLargeSuitcases' is already enforced by setting the variable's lower bound.\n# No additional constraint is needed."
            }
        },
        {
            "description": "The total number of suitcases sent cannot exceed MaxTotalSuitcases.",
            "formulation": "SmallSuitcasesUsed + LargeSuitcasesUsed \\leq MaxTotalSuitcases",
            "code": {
                "gurobipy": "model.addConstr(SmallSuitcasesUsed + LargeSuitcasesUsed <= MaxTotalSuitcases)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of snacks delivered, calculated as (Number of Small Suitcases \u00d7 SmallSuitcaseCapacity) plus (Number of Large Suitcases \u00d7 LargeSuitcaseCapacity).",
        "formulation": "Max \\left( SmallSuitcasesUsed \\times SmallSuitcaseCapacity + LargeSuitcasesUsed \\times LargeSuitcaseCapacity \\right)",
        "code": {
            "gurobipy": "model.setObjective(SmallSuitcasesUsed * SmallSuitcaseCapacity + LargeSuitcasesUsed * LargeSuitcaseCapacity, GRB.MAXIMIZE)"
        }
    }
}