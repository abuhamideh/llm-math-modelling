{
    "parametrized_description": "A jam company sends its product out in small and large jars. A small jar can hold SmallJarCapacity milliliters of jam while a large jar can hold LargeJarCapacity milliliters of jam. Most stores prefer the smaller size and so the number of large jars cannot exceed MaxLargeJarsRatio times the number of small jars. If the company wants to ship at least MinJamVolume milliliters of jam, find the minimum number of jars that can be used.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallJarCapacity": {
            "description": "Capacity of a small jar in milliliters",
            "shape": []
        },
        "LargeJarCapacity": {
            "description": "Capacity of a large jar in milliliters",
            "shape": []
        },
        "MinJamVolume": {
            "description": "Minimum total volume of jam to ship in milliliters",
            "shape": []
        },
        "MaxLargeJarsRatio": {
            "description": "Maximum allowed ratio of large jars to small jars",
            "shape": []
        }
    },
    "variables": {
        "NumberOfSmallJars": {
            "description": "The number of small jars to ship",
            "type": "continuous",
            "shape": []
        },
        "NumberOfLargeJars": {
            "description": "The number of large jars to ship",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total volume of jam shipped is at least MinJamVolume milliliters.",
            "formulation": "SmallJarCapacity \\times NumberOfSmallJars + LargeJarCapacity \\times NumberOfLargeJars \\geq MinJamVolume",
            "code": {
                "gurobipy": "model.addConstr(SmallJarCapacity * NumberOfSmallJars + LargeJarCapacity * NumberOfLargeJars >= MinJamVolume)"
            }
        },
        {
            "description": "The number of large jars does not exceed MaxLargeJarsRatio times the number of small jars.",
            "formulation": "NumberOfLargeJars \\leq MaxLargeJarsRatio \\cdot NumberOfSmallJars",
            "code": {
                "gurobipy": "model.addConstr(NumberOfLargeJars <= MaxLargeJarsRatio * NumberOfSmallJars)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of small and large jars used to ship the jam.",
        "formulation": "Min NumberOfSmallJars + NumberOfLargeJars",
        "code": {
            "gurobipy": "model.setObjective(NumberOfSmallJars + NumberOfLargeJars, GRB.MINIMIZE)"
        }
    }
}