{
    "parametrized_description": "Determine the number of helicopter trips and car trips to transport at least MinFishToTransport fish. Each helicopter trip carries HelicopterCapacity fish and takes HelicopterTime minutes, and each car trip carries CarCapacity fish and takes CarTime minutes. The number of helicopter trips must not exceed MaxHelicopterTrips, and at least MinPercentageCarTrips of all trips must be by car. The objective is to minimize the total time required for all trips.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "HelicopterCapacity": {
            "description": "Number of fish a helicopter can transport per trip",
            "shape": []
        },
        "HelicopterTime": {
            "description": "Time a helicopter takes per trip in minutes",
            "shape": []
        },
        "CarCapacity": {
            "description": "Number of fish a car can transport per trip",
            "shape": []
        },
        "CarTime": {
            "description": "Time a car takes per trip in minutes",
            "shape": []
        },
        "MaxHelicopterTrips": {
            "description": "Maximum number of helicopter trips allowed",
            "shape": []
        },
        "MinPercentageCarTrips": {
            "description": "Minimum percentage of trips that must be by car",
            "shape": []
        },
        "MinFishToTransport": {
            "description": "Minimum number of fish to transport",
            "shape": []
        }
    },
    "variables": {
        "HelicopterTrips": {
            "description": "Number of helicopter trips",
            "type": "continuous",
            "shape": []
        },
        "CarTrips": {
            "description": "Number of car trips",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of fish transported by helicopters and cars must be at least MinFishToTransport.",
            "formulation": "HelicopterCapacity \\times HelicopterTrips + CarCapacity \\times CarTrips \\geq MinFishToTransport",
            "code": {
                "gurobipy": "model.addConstr(HelicopterCapacity * HelicopterTrips + CarCapacity * CarTrips >= MinFishToTransport)"
            }
        },
        {
            "description": "The number of helicopter trips must not exceed MaxHelicopterTrips.",
            "formulation": "HelicopterTrips \\leq MaxHelicopterTrips",
            "code": {
                "gurobipy": "model.addConstr(HelicopterTrips <= MaxHelicopterTrips)"
            }
        },
        {
            "description": "At least MinPercentageCarTrips of all trips must be by car.",
            "formulation": "CarTrips \\geq MinPercentageCarTrips \\cdot (HelicopterTrips + CarTrips)",
            "code": {
                "gurobipy": "model.addConstr(CarTrips >= MinPercentageCarTrips * (HelicopterTrips + CarTrips))"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total time required for all trips, calculated as the sum of the time taken by helicopter trips and car trips.",
        "formulation": "Min \\ HelicopterTrips \\times HelicopterTime + CarTrips \\times CarTime",
        "code": {
            "gurobipy": "model.setObjective(HelicopterTrips * HelicopterTime + CarTrips * CarTime, GRB.MINIMIZE)"
        }
    }
}