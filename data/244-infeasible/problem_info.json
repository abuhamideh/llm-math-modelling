{
    "parametrized_description": "Determine the number of large bags (L) and tiny bags (T) such that LargeBagEnergy * L + TinyBagEnergy * T \u2264 TotalEnergy, L = RatioLargeToTiny * T, and T \u2265 MinTinyBags. The goal is to maximize the total grain weight, which is LargeBagCapacity * L + TinyBagCapacity * T.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "LargeBagCapacity": {
            "description": "The capacity of a large bag in kilograms",
            "shape": []
        },
        "LargeBagEnergy": {
            "description": "The energy required to transport a large bag",
            "shape": []
        },
        "TinyBagCapacity": {
            "description": "The capacity of a tiny bag in kilograms",
            "shape": []
        },
        "TinyBagEnergy": {
            "description": "The energy required to transport a tiny bag",
            "shape": []
        },
        "TotalEnergy": {
            "description": "Total available energy for distribution",
            "shape": []
        },
        "RatioLargeToTiny": {
            "description": "The ratio of large bags to tiny bags",
            "shape": []
        },
        "MinTinyBags": {
            "description": "Minimum number of tiny bags required",
            "shape": []
        }
    },
    "variables": {
        "LargeBags": {
            "description": "The number of large bags to transport",
            "type": "continuous",
            "shape": []
        },
        "TinyBags": {
            "description": "The number of tiny bags to transport",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "LargeBagEnergy * L + TinyBagEnergy * T must be less than or equal to TotalEnergy.",
            "formulation": "LargeBagEnergy \\cdot LargeBags + TinyBagEnergy \\cdot TinyBags \\leq TotalEnergy",
            "code": {
                "gurobipy": "model.addConstr(LargeBagEnergy * LargeBags + TinyBagEnergy * TinyBags <= TotalEnergy)"
            }
        },
        {
            "description": "L must be equal to RatioLargeToTiny multiplied by T.",
            "formulation": "LargeBags = RatioLargeToTiny \\times TinyBags",
            "code": {
                "gurobipy": "model.addConstr(LargeBags == RatioLargeToTiny * TinyBags)"
            }
        },
        {
            "description": "T must be greater than or equal to MinTinyBags.",
            "formulation": "TinyBags \\geq MinTinyBags",
            "code": {
                "gurobipy": "model.addConstr(TinyBags >= MinTinyBags)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total grain weight, which is LargeBagCapacity * L + TinyBagCapacity * T.",
        "formulation": "Max LargeBagCapacity \\times LargeBags + TinyBagCapacity \\times TinyBags",
        "code": {
            "gurobipy": "model.setObjective(LargeBagCapacity * LargeBags + TinyBagCapacity * TinyBags, GRB.MAXIMIZE)"
        }
    }
}