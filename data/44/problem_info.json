{
    "parametrized_description": "A woodshop can purchase NumSawTypes different types of saws. Each saw type can cut PlanksCutPerSaw planks of wood per day and produce SawdustPerSaw units of sawdust per day. The woodshop must cut at least MinPlanks planks of wood per day and produce at most MaxSawdust units of sawdust per day. The goal is to determine the number of each type of saw to purchase to minimize the total number of saws needed.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumSawTypes": {
            "description": "Number of types of saws available",
            "shape": []
        },
        "PlanksCutPerSaw": {
            "description": "Number of planks cut per day by each saw type",
            "shape": [
                "NumSawTypes"
            ]
        },
        "SawdustPerSaw": {
            "description": "Units of sawdust produced per day by each saw type",
            "shape": [
                "NumSawTypes"
            ]
        },
        "MinPlanks": {
            "description": "Minimum number of planks to be cut per day",
            "shape": []
        },
        "MaxSawdust": {
            "description": "Maximum units of sawdust to be produced per day",
            "shape": []
        }
    },
    "variables": {
        "NumberOfSaws": {
            "description": "The number of saws of each type used per day",
            "type": "continuous",
            "shape": [
                "NumSawTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The woodshop must cut at least MinPlanks planks of wood per day.",
            "formulation": "\\sum_{j=1}^{NumSawTypes} NumberOfSaws_{j} \\times PlanksCutPerSaw_{j} \\geq MinPlanks",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumberOfSaws[j] * PlanksCutPerSaw[j] for j in range(NumSawTypes)) >= MinPlanks)"
            }
        },
        {
            "description": "The woodshop must produce at most MaxSawdust units of sawdust per day.",
            "formulation": "\\sum_{i=1}^{NumSawTypes} NumberOfSaws_i \\cdot SawdustPerSaw_i \\leq MaxSawdust",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumberOfSaws[i] * SawdustPerSaw[i] for i in range(NumSawTypes)) <= MaxSawdust)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of saws purchased.",
        "formulation": "Min \\sum_{i=1}^{\\text{NumSawTypes}} \\text{NumberOfSaws}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(NumberOfSaws[i] for i in range(NumSawTypes)), GRB.MINIMIZE)"
        }
    }
}