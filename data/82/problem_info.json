{
    "parametrized_description": "A company can build NumFactoryTypes different factory types. Each factory type i has a production rate of ProductionRate[i] toys per day and requires OperatorRequirement[i] operators. The company must produce at least TotalProductionRequirement toys per day and has a total of TotalAvailableOperators operators available. Determine the number of each factory type to build to minimize the total number of factories.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFactoryTypes": {
            "description": "Number of factory types",
            "shape": []
        },
        "ProductionRate": {
            "description": "Production rate of each factory type (toys per day)",
            "shape": [
                "NumFactoryTypes"
            ]
        },
        "OperatorRequirement": {
            "description": "Number of operators required for each factory type",
            "shape": [
                "NumFactoryTypes"
            ]
        },
        "TotalProductionRequirement": {
            "description": "Minimum number of toys required per day",
            "shape": []
        },
        "TotalAvailableOperators": {
            "description": "Total number of available operators",
            "shape": []
        }
    },
    "variables": {
        "NumberOfFactories": {
            "description": "The number of factories of each type",
            "type": "continuous",
            "shape": [
                "NumFactoryTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total production must be at least TotalProductionRequirement toys per day. This is achieved by ensuring that the sum of ProductionRate[i] multiplied by the number of factories of each type i is greater than or equal to TotalProductionRequirement.",
            "formulation": "\\sum_{i=1}^{\\text{NumFactoryTypes}} \\text{ProductionRate}_i \\times \\text{NumberOfFactories}_i \\geq \\text{TotalProductionRequirement}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ProductionRate[i] * NumberOfFactories[i] for i in range(NumFactoryTypes)) >= TotalProductionRequirement)"
            }
        },
        {
            "description": "The total number of operators used must not exceed TotalAvailableOperators. This is ensured by making sure that the sum of OperatorRequirement[i] multiplied by the number of factories of each type i is less than or equal to TotalAvailableOperators.",
            "formulation": "\\sum_{i=1}^{\\text{NumFactoryTypes}} \\text{OperatorRequirement}_i \\cdot \\text{NumberOfFactories}_i \\leq \\text{TotalAvailableOperators}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(OperatorRequirement[i] * NumberOfFactories[i] for i in range(NumFactoryTypes)) <= TotalAvailableOperators)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of factories built. This is done by minimizing the sum of the number of factories of each type.",
        "formulation": "Min \\sum_{i=1}^{NumFactoryTypes} NumberOfFactories_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(NumberOfFactories[i] for i in range(NumFactoryTypes)), GRB.MINIMIZE)"
        }
    }
}