{
    "parametrized_description": "A vine company sells two types of bottles: vintage and regular. A vintage bottle holds VintageBottleCapacity milliliters of vine, while a regular bottle holds RegularBottleCapacity milliliters of vine. The company has TotalAvailableVine milliliters of vine available. The number of regular bottles must be at least RegularToVintageMinRatio times the number of vintage bottles. Additionally, at least MinVintageBottles vintage bottles must be produced. The objective is to maximize the total number of bottles produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "VintageBottleCapacity": {
            "description": "Capacity of a vintage bottle in milliliters",
            "shape": []
        },
        "RegularBottleCapacity": {
            "description": "Capacity of a regular bottle in milliliters",
            "shape": []
        },
        "TotalAvailableVine": {
            "description": "Total available vine in milliliters",
            "shape": []
        },
        "RegularToVintageMinRatio": {
            "description": "Minimum ratio of regular bottles to vintage bottles",
            "shape": []
        },
        "MinVintageBottles": {
            "description": "Minimum number of vintage bottles to be produced",
            "shape": []
        }
    },
    "variables": {
        "NumberVintageBottles": {
            "description": "The number of vintage bottles to produce",
            "type": "continuous",
            "shape": []
        },
        "NumberRegularBottles": {
            "description": "The number of regular bottles to produce",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total amount of vine used by vintage and regular bottles must not exceed TotalAvailableVine milliliters.",
            "formulation": "NumberVintageBottles \\times VintageBottleCapacity + NumberRegularBottles \\times RegularBottleCapacity \\leq TotalAvailableVine",
            "code": {
                "gurobipy": "model.addConstr(VintageBottleCapacity * NumberVintageBottles + RegularBottleCapacity * NumberRegularBottles <= TotalAvailableVine)"
            }
        },
        {
            "description": "The number of regular bottles must be at least RegularToVintageMinRatio times the number of vintage bottles.",
            "formulation": "NumberRegularBottles \\geq RegularToVintageMinRatio \\times NumberVintageBottles",
            "code": {
                "gurobipy": "model.addConstr(NumberRegularBottles >= RegularToVintageMinRatio * NumberVintageBottles)"
            }
        },
        {
            "description": "At least MinVintageBottles vintage bottles must be produced.",
            "formulation": "NumberVintageBottles \\geq MinVintageBottles",
            "code": {
                "gurobipy": "model.addConstr(NumberVintageBottles >= MinVintageBottles)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of bottles produced.",
        "formulation": "Max \\left( NumberVintageBottles + NumberRegularBottles \\right)",
        "code": {
            "gurobipy": "model.setObjective(NumberVintageBottles + NumberRegularBottles, GRB.MAXIMIZE)"
        }
    }
}