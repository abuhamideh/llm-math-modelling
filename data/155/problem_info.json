{
    "parametrized_description": "Determine the number of bikes and scooters to maximize the total number of meals delivered, where each bike holds BikeCapacity meals and requires BikeCharge units of charge, and each scooter holds ScooterCapacity meals and requires ScooterCharge units of charge. Ensure that the proportion of bikes does not exceed MaxBikeFraction of all electric vehicles, at least MinScooters scooters are used, and the total charge consumed by all vehicles does not exceed TotalCharge units.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "BikeCapacity": {
            "description": "Number of meals a bike can hold",
            "shape": []
        },
        "BikeCharge": {
            "description": "Units of charge a bike requires",
            "shape": []
        },
        "ScooterCapacity": {
            "description": "Number of meals a scooter can hold",
            "shape": []
        },
        "ScooterCharge": {
            "description": "Units of charge a scooter requires",
            "shape": []
        },
        "MaxBikeFraction": {
            "description": "Maximum fraction of electric vehicles that can be bikes",
            "shape": []
        },
        "MinScooters": {
            "description": "Minimum number of scooters to be used",
            "shape": []
        },
        "TotalCharge": {
            "description": "Total units of charge available",
            "shape": []
        }
    },
    "variables": {
        "NumberOfBikes": {
            "description": "The number of bikes",
            "type": "continuous",
            "shape": [
                "integer"
            ]
        },
        "NumberOfScooters": {
            "description": "The number of scooters",
            "type": "continuous",
            "shape": [
                "integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The proportion of bikes does not exceed MaxBikeFraction of all electric vehicles.",
            "formulation": "NumberOfBikes \\leq MaxBikeFraction \\times \\left( NumberOfBikes + NumberOfScooters \\right)",
            "code": {
                "gurobipy": "model.addConstr(NumberOfBikes <= MaxBikeFraction * (NumberOfBikes + NumberOfScooters))"
            }
        },
        {
            "description": "At least MinScooters scooters must be used.",
            "formulation": "NumberOfScooters \\geq MinScooters",
            "code": {
                "gurobipy": "model.addConstr(NumberOfScooters >= MinScooters)"
            }
        },
        {
            "description": "The total charge consumed by all vehicles does not exceed TotalCharge units.",
            "formulation": "NumberOfBikes \\times BikeCharge + NumberOfScooters \\times ScooterCharge \\leq TotalCharge",
            "code": {
                "gurobipy": "model.addConstr(BikeCharge * NumberOfBikes + ScooterCharge * NumberOfScooters <= TotalCharge)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of meals delivered, calculated as the sum of BikeCapacity multiplied by the number of bikes and ScooterCapacity multiplied by the number of scooters.",
        "formulation": "Max \\ BikeCapacity \\cdot NumberOfBikes + ScooterCapacity \\cdot NumberOfScooters",
        "code": {
            "gurobipy": "model.setObjective(BikeCapacity * NumberOfBikes + ScooterCapacity * NumberOfScooters, GRB.MAXIMIZE)"
        }
    }
}