{
    "parametrized_description": "A restaurant offers two types of meals: Original and Experimental. The Original meal generates OriginalFoodWaste units of food waste and OriginalWrappingWaste units of wrapping waste, and requires OriginalCookingTime minutes to prepare. The Experimental meal generates ExperimentalFoodWaste units of food waste and ExperimentalWrappingWaste units of wrapping waste, and requires ExperimentalCookingTime minutes to prepare. The total wrapping waste must not exceed MaxWrappingWaste, and the total food waste must not exceed MaxFoodWaste. Determine the number of Original and Experimental meals to minimize the total cooking time.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "OriginalFoodWaste": {
            "description": "Food waste generated by the original meal",
            "shape": []
        },
        "OriginalWrappingWaste": {
            "description": "Wrapping waste generated by the original meal",
            "shape": []
        },
        "OriginalCookingTime": {
            "description": "Cooking time for the original meal",
            "shape": []
        },
        "ExperimentalFoodWaste": {
            "description": "Food waste generated by the experimental meal",
            "shape": []
        },
        "ExperimentalWrappingWaste": {
            "description": "Wrapping waste generated by the experimental meal",
            "shape": []
        },
        "ExperimentalCookingTime": {
            "description": "Cooking time for the experimental meal",
            "shape": []
        },
        "MaxWrappingWaste": {
            "description": "Maximum allowed wrapping waste",
            "shape": []
        },
        "MaxFoodWaste": {
            "description": "Maximum allowed food waste",
            "shape": []
        }
    },
    "variables": {
        "OriginalMeals": {
            "description": "The number of Original meals",
            "type": "continuous",
            "shape": []
        },
        "ExperimentalMeals": {
            "description": "The number of Experimental meals",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total wrapping waste generated by Original and Experimental meals must not exceed MaxWrappingWaste.",
            "formulation": "OriginalWrappingWaste \\times OriginalMeals + ExperimentalWrappingWaste \\times ExperimentalMeals \\leq MaxWrappingWaste",
            "code": {
                "gurobipy": "model.addConstr(OriginalWrappingWaste * OriginalMeals + ExperimentalWrappingWaste * ExperimentalMeals <= MaxWrappingWaste)"
            }
        },
        {
            "description": "The total food waste generated by Original and Experimental meals must not exceed MaxFoodWaste.",
            "formulation": "OriginalMeals \\times OriginalFoodWaste + ExperimentalMeals \\times ExperimentalFoodWaste \\leq MaxFoodWaste",
            "code": {
                "gurobipy": "model.addConstr(OriginalMeals * OriginalFoodWaste + ExperimentalMeals * ExperimentalFoodWaste <= MaxFoodWaste)"
            }
        }
    ],
    "objective": {
        "description": "The total cooking time is the sum of the cooking times required for Original and Experimental meals. The objective is to minimize the total cooking time.",
        "formulation": "Min OriginalCookingTime \\times OriginalMeals + ExperimentalCookingTime \\times ExperimentalMeals",
        "code": {
            "gurobipy": "model.setObjective(OriginalCookingTime * OriginalMeals + ExperimentalCookingTime * ExperimentalMeals, GRB.MINIMIZE)"
        }
    }
}