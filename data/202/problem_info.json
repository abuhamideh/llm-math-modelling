{
    "parametrized_description": "A person purchases a number of each of NumSupplements supplement types to meet the minimum requirements for NumNutrients nutrients. Each supplement type i provides NutrientContent[i][j] units of nutrient j and has a cost of CostPerPill[i] per pill. The objective is to minimize the total cost while ensuring that for each nutrient j, the total obtained is at least MinRequirement[j].",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumSupplements": {
            "description": "Number of supplement types",
            "shape": []
        },
        "NumNutrients": {
            "description": "Number of nutrient types",
            "shape": []
        },
        "NutrientContent": {
            "description": "Amount of nutrient j per pill of supplement i",
            "shape": [
                "NumSupplements",
                "NumNutrients"
            ]
        },
        "MinRequirement": {
            "description": "Minimum required units of nutrient j",
            "shape": [
                "NumNutrients"
            ]
        },
        "CostPerPill": {
            "description": "Cost per pill of supplement i",
            "shape": [
                "NumSupplements"
            ]
        }
    },
    "variables": {
        "NumPillsSupplement": {
            "description": "Number of pills of supplement i",
            "type": "continuous",
            "shape": [
                "NumSupplements"
            ]
        }
    },
    "constraints": [
        {
            "description": "For each nutrient j, the total amount of nutrient j obtained from the supplements must be at least MinRequirement[j].",
            "formulation": "\\sum_{i=1}^{\\text{NumSupplements}} \\text{NutrientContent}_{i,j} \\cdot \\text{NumPillsSupplement}_{i} \\geq \\text{MinRequirement}_{j} \\quad \\forall j \\in \\{1, \\dots, \\text{NumNutrients}\\}",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(NutrientContent[i][j] * NumPillsSupplement[i] for i in range(NumSupplements)) >= MinRequirement[j] for j in range(NumNutrients)))"
            }
        },
        {
            "description": "The number of pills purchased for each supplement must be a non-negative integer.",
            "formulation": "NumPillsSupplement \\geq 0",
            "code": {
                "gurobipy": "model.addConstrs((NumPillsSupplement[i] >= 0 for i in range(NumSupplements)), 'NumPillsSupplementNonNeg')"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total cost, which is the sum of CostPerPill[i] multiplied by the number of pills purchased for each supplement i, while ensuring that for each nutrient j, the total obtained is at least MinRequirement[j].",
        "formulation": "Min \\sum_{i=1}^{\\text{NumSupplements}} \\text{CostPerPill}_i \\times \\text{NumPillsSupplement}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(CostPerPill[i] * NumPillsSupplement[i] for i in range(NumSupplements)), GRB.MINIMIZE)"
        }
    }
}