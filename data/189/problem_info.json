{
    "parametrized_description": "A company offers NumFoods different food items, each with an associated Price and containing specific amounts of NumNutrients nutrients as defined by the NutrientContent matrix. The company must ensure that the combination of selected food items provides at least the minimum required amount for each nutrient, specified by MinNutrient. The objective is to determine the selection of food items that satisfies all nutrient requirements while minimizing the total Price.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFoods": {
            "description": "Number of food items",
            "shape": []
        },
        "NumNutrients": {
            "description": "Number of nutrients",
            "shape": []
        },
        "MinNutrient": {
            "description": "Minimum required amount for each nutrient",
            "shape": [
                "NumNutrients"
            ]
        },
        "Price": {
            "description": "Price of each food item",
            "shape": [
                "NumFoods"
            ]
        },
        "NutrientContent": {
            "description": "Amount of each nutrient in each food item",
            "shape": [
                "NumNutrients",
                "NumFoods"
            ]
        }
    },
    "variables": {
        "Quantity": {
            "description": "The quantity of each food item",
            "type": "continuous",
            "shape": [
                "NumFoods"
            ]
        }
    },
    "constraints": [
        {
            "description": "The combination of selected food items provides at least the minimum required amount for each nutrient as specified by MinNutrient.",
            "formulation": "\\sum_{f=1}^{\\text{NumFoods}} \\text{NutrientContent}_{n,f} \\times \\text{Quantity}_f \\geq \\text{MinNutrient}_n \\quad \\forall n \\in \\{1, \\dots, \\text{NumNutrients}\\}",
            "code": {
                "gurobipy": "for n in range(NumNutrients):\n    model.addConstr(quicksum(NutrientContent[n][f] * Quantity[f] for f in range(NumFoods)) >= MinNutrient[n])"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total Price of the selected food items while satisfying all nutrient requirements.",
        "formulation": "Min \\sum_{i=1}^{NumFoods} Price_i \\times Quantity_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(Price[i] * Quantity[i] for i in range(NumFoods)), GRB.MINIMIZE)"
        }
    }
}