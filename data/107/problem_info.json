{
    "parametrized_description": "Let B represent the number of burgers and P represent the number of pizza slices. The objective is to minimize CholesterolPerBurger multiplied by B plus CholesterolPerPizzaSlice multiplied by P. This is subject to the constraints that FatPerBurger multiplied by B plus FatPerPizzaSlice multiplied by P is at least MinFat, CaloriesPerBurger multiplied by B plus CaloriesPerPizzaSlice multiplied by P is at least MinCalories, and P is at least MinPizzaToBurgerRatio multiplied by B.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "FatPerBurger": {
            "description": "Units of fat per burger",
            "shape": []
        },
        "FatPerPizzaSlice": {
            "description": "Units of fat per slice of pizza",
            "shape": []
        },
        "CaloriesPerBurger": {
            "description": "Calories per burger",
            "shape": []
        },
        "CaloriesPerPizzaSlice": {
            "description": "Calories per slice of pizza",
            "shape": []
        },
        "CholesterolPerBurger": {
            "description": "Units of cholesterol per burger",
            "shape": []
        },
        "CholesterolPerPizzaSlice": {
            "description": "Units of cholesterol per slice of pizza",
            "shape": []
        },
        "MinFat": {
            "description": "Minimum total units of fat required",
            "shape": []
        },
        "MinCalories": {
            "description": "Minimum total calories required",
            "shape": []
        },
        "MinPizzaToBurgerRatio": {
            "description": "Minimum ratio of slices of pizza to burgers",
            "shape": []
        }
    },
    "variables": {
        "Burgers": {
            "description": "The number of burgers",
            "type": "continuous",
            "shape": []
        },
        "PizzaSlices": {
            "description": "The number of slices of pizza",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "FatPerBurger multiplied by B plus FatPerPizzaSlice multiplied by P is at least MinFat",
            "formulation": "FatPerBurger \\cdot Burgers + FatPerPizzaSlice \\cdot PizzaSlices \\geq MinFat",
            "code": {
                "gurobipy": "model.addConstr(FatPerBurger * Burgers + FatPerPizzaSlice * PizzaSlices >= MinFat)"
            }
        },
        {
            "description": "CaloriesPerBurger multiplied by B plus CaloriesPerPizzaSlice multiplied by P is at least MinCalories",
            "formulation": "CaloriesPerBurger \\cdot Burgers + CaloriesPerPizzaSlice \\cdot PizzaSlices \\geq MinCalories",
            "code": {
                "gurobipy": "model.addConstr(CaloriesPerBurger * Burgers + CaloriesPerPizzaSlice * PizzaSlices >= MinCalories)"
            }
        },
        {
            "description": "P is at least MinPizzaToBurgerRatio multiplied by B",
            "formulation": "PizzaSlices \\geq MinPizzaToBurgerRatio \\times Burgers",
            "code": {
                "gurobipy": "model.addConstr(PizzaSlices >= MinPizzaToBurgerRatio * Burgers)"
            }
        }
    ],
    "objective": {
        "description": "Minimize CholesterolPerBurger multiplied by B plus CholesterolPerPizzaSlice multiplied by P",
        "formulation": "Min CholesterolPerBurger \\times Burgers + CholesterolPerPizzaSlice \\times PizzaSlices",
        "code": {
            "gurobipy": "model.setObjective(CholesterolPerBurger * Burgers + CholesterolPerPizzaSlice * PizzaSlices, GRB.MINIMIZE)"
        }
    }
}