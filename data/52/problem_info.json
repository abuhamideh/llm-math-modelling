{
    "parametrized_description": "A company is building NumFactoryTypes different factory types. Each factory type i produces ProductionRate[i] phones per day and requires ManagerRequirement[i] managers. The company has AvailableManagers managers available and must produce at least RequiredPhones phones per day. Determine the number of each factory type to build to minimize the total number of factories.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFactoryTypes": {
            "description": "Number of factory types",
            "shape": []
        },
        "ProductionRate": {
            "description": "Production rate of each factory type in phones per day",
            "shape": [
                "NumFactoryTypes"
            ]
        },
        "ManagerRequirement": {
            "description": "Number of managers required for each factory type",
            "shape": [
                "NumFactoryTypes"
            ]
        },
        "AvailableManagers": {
            "description": "Total number of managers available",
            "shape": []
        },
        "RequiredPhones": {
            "description": "Minimum number of phones required per day",
            "shape": []
        }
    },
    "variables": {
        "FactoriesBuilt": {
            "description": "The number of factories built for each factory type",
            "type": "continuous",
            "shape": [
                "NumFactoryTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total number of managers required by all factory types built does not exceed AvailableManagers.",
            "formulation": "\\sum_{i=1}^{\\text{NumFactoryTypes}} \\text{FactoriesBuilt}_i \\times \\text{ManagerRequirement}_i \\leq \\text{AvailableManagers}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(FactoriesBuilt[i] * ManagerRequirement[i] for i in range(NumFactoryTypes)) <= AvailableManagers)"
            }
        },
        {
            "description": "The total phone production from all factory types built is at least RequiredPhones per day.",
            "formulation": "\\sum_{i=1}^{NumFactoryTypes} FactoriesBuilt_i \\times ProductionRate_i \\geq RequiredPhones",
            "code": {
                "gurobipy": "model.addConstr(quicksum(FactoriesBuilt[i] * ProductionRate[i] for i in range(NumFactoryTypes)) >= RequiredPhones)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of factories built while meeting the production and manager constraints.",
        "formulation": "Minimize \\sum_{i=1}^{NumFactoryTypes} \\text{FactoriesBuilt}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(FactoriesBuilt[i] for i in range(NumFactoryTypes)), GRB.MINIMIZE)"
        }
    }
}