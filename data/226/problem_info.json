{
    "parametrized_description": "A delivery person can schedule shifts on either bike or scooter. Each bike shift delivers OrdersPerBikeShift orders, consumes EnergyPerBikeShift units of energy, and receives TipsPerBikeShift in tips. Each scooter shift delivers OrdersPerScooterShift orders, consumes EnergyPerScooterShift units of energy, and receives TipsPerScooterShift in tips. The delivery person has TotalShifts available per month, TotalEnergy units of energy, must deliver at least MinOrders orders, and must schedule at least MinShiftsScooter shifts on a scooter. The goal is to maximize the total tips received.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "TotalShifts": {
            "description": "Total number of shifts available per month",
            "shape": []
        },
        "TotalEnergy": {
            "description": "Total units of energy available per month",
            "shape": []
        },
        "MinOrders": {
            "description": "Minimum number of orders to deliver",
            "shape": []
        },
        "MinShiftsScooter": {
            "description": "Minimum number of shifts on a scooter",
            "shape": []
        },
        "OrdersPerBikeShift": {
            "description": "Number of orders delivered per bike shift",
            "shape": []
        },
        "EnergyPerBikeShift": {
            "description": "Units of energy consumed per bike shift",
            "shape": []
        },
        "TipsPerBikeShift": {
            "description": "Tips received per bike shift",
            "shape": []
        },
        "OrdersPerScooterShift": {
            "description": "Number of orders delivered per scooter shift",
            "shape": []
        },
        "EnergyPerScooterShift": {
            "description": "Units of energy consumed per scooter shift",
            "shape": []
        },
        "TipsPerScooterShift": {
            "description": "Tips received per scooter shift",
            "shape": []
        }
    },
    "variables": {
        "BikeShifts": {
            "description": "The number of bike shifts scheduled",
            "type": "continuous",
            "shape": []
        },
        "ScooterShifts": {
            "description": "The number of scooter shifts scheduled",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of bike and scooter shifts scheduled cannot exceed the TotalShifts available per month.",
            "formulation": "BikeShifts + ScooterShifts \\leq TotalShifts",
            "code": {
                "gurobipy": "model.addConstr(BikeShifts + ScooterShifts <= TotalShifts)"
            }
        },
        {
            "description": "The total energy consumed by all shifts cannot exceed TotalEnergy units.",
            "formulation": "EnergyPerBikeShift \\cdot BikeShifts + EnergyPerScooterShift \\cdot ScooterShifts \\leq TotalEnergy",
            "code": {
                "gurobipy": "model.addConstr(EnergyPerBikeShift * BikeShifts + EnergyPerScooterShift * ScooterShifts <= TotalEnergy)"
            }
        },
        {
            "description": "The total number of orders delivered must be at least MinOrders.",
            "formulation": "BikeShifts \\cdot OrdersPerBikeShift + ScooterShifts \\cdot OrdersPerScooterShift \\geq MinOrders",
            "code": {
                "gurobipy": "model.addConstr(BikeShifts * OrdersPerBikeShift + ScooterShifts * OrdersPerScooterShift >= MinOrders)"
            }
        },
        {
            "description": "At least MinShiftsScooter shifts must be scheduled on a scooter.",
            "formulation": "ScooterShifts \\geq MinShiftsScooter",
            "code": {
                "gurobipy": "model.addConstr(ScooterShifts >= MinShiftsScooter)"
            }
        }
    ],
    "objective": {
        "description": "The total tips received is the sum of the tips from all bike and scooter shifts. The objective is to maximize the total tips received.",
        "formulation": "Max \\ TipsPerBikeShift \\times BikeShifts + TipsPerScooterShift \\times ScooterShifts",
        "code": {
            "gurobipy": "model.setObjective(TipsPerBikeShift * BikeShifts + TipsPerScooterShift * ScooterShifts, GRB.MAXIMIZE)"
        }
    }
}