{
    "parametrized_description": "Determine the quantities of FullWeighted and SemiWeighted keyboards to manufacture in order to maximize total revenue, where total revenue is calculated as PriceFullWeighted multiplied by the quantity of FullWeighted keyboards plus PriceSemiWeighted multiplied by the quantity of SemiWeighted keyboards. The production must satisfy two constraints: the total oscillator chips used, calculated as ChipsPerFullWeighted multiplied by the quantity of FullWeighted keyboards plus ChipsPerSemiWeighted multiplied by the quantity of SemiWeighted keyboards, must not exceed TotalChipsAvailable, and the total production time, calculated as ProductionTimePerKeyboard multiplied by the sum of the quantities of FullWeighted and SemiWeighted keyboards, must not exceed TotalProductionHours.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "PriceFullWeighted": {
            "description": "Price of the full-weighted keyboard",
            "shape": []
        },
        "PriceSemiWeighted": {
            "description": "Price of the semi-weighted keyboard",
            "shape": []
        },
        "TotalChipsAvailable": {
            "description": "Total oscillator chips available per day",
            "shape": []
        },
        "ChipsPerFullWeighted": {
            "description": "Number of oscillator chips required per full-weighted keyboard",
            "shape": []
        },
        "ChipsPerSemiWeighted": {
            "description": "Number of oscillator chips required per semi-weighted keyboard",
            "shape": []
        },
        "TotalProductionHours": {
            "description": "Total production hours available per day",
            "shape": []
        },
        "ProductionTimePerKeyboard": {
            "description": "Production time required to manufacture one keyboard",
            "shape": []
        }
    },
    "variables": {
        "QuantityFullWeighted": {
            "description": "The quantity of FullWeighted keyboards",
            "type": "continuous",
            "shape": []
        },
        "QuantitySemiWeighted": {
            "description": "The quantity of SemiWeighted keyboards",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total oscillator chips used, calculated as ChipsPerFullWeighted multiplied by the quantity of FullWeighted keyboards plus ChipsPerSemiWeighted multiplied by the quantity of SemiWeighted keyboards, must not exceed TotalChipsAvailable.",
            "formulation": "ChipsPerFullWeighted \\times QuantityFullWeighted + ChipsPerSemiWeighted \\times QuantitySemiWeighted \\leq TotalChipsAvailable",
            "code": {
                "gurobipy": "model.addConstr(ChipsPerFullWeighted * QuantityFullWeighted + ChipsPerSemiWeighted * QuantitySemiWeighted <= TotalChipsAvailable)"
            }
        },
        {
            "description": "The total production time, calculated as ProductionTimePerKeyboard multiplied by the sum of the quantities of FullWeighted and SemiWeighted keyboards, must not exceed TotalProductionHours.",
            "formulation": "ProductionTimePerKeyboard \\times (QuantityFullWeighted + QuantitySemiWeighted) \\leq TotalProductionHours",
            "code": {
                "gurobipy": "model.addConstr(ProductionTimePerKeyboard * (QuantityFullWeighted + QuantitySemiWeighted) <= TotalProductionHours)"
            }
        }
    ],
    "objective": {
        "description": "Total revenue is calculated as PriceFullWeighted multiplied by the quantity of FullWeighted keyboards plus PriceSemiWeighted multiplied by the quantity of SemiWeighted keyboards. The objective is to maximize total revenue.",
        "formulation": "Max \\ PriceFullWeighted \\times QuantityFullWeighted + PriceSemiWeighted \\times QuantitySemiWeighted",
        "code": {
            "gurobipy": "model.setObjective(PriceFullWeighted * QuantityFullWeighted + PriceSemiWeighted * QuantitySemiWeighted, GRB.MAXIMIZE)"
        }
    }
}