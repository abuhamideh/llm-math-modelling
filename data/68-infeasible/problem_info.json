{
    "parametrized_description": "A banana company sells their bananas in small and large crates. A small crate can hold CapacitySmallCrate bananas while a large crate can hold CapacityLargeCrate bananas. The number of large crates must be at least LargeToSmallRatio times the number of small crates. At least MinSmallCrates should be used. If the company has available TotalBananas bananas, how many of each crate should the company use to maximize the total number of crates produced?",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CapacitySmallCrate": {
            "description": "Number of bananas a small crate can hold",
            "shape": []
        },
        "CapacityLargeCrate": {
            "description": "Number of bananas a large crate can hold",
            "shape": []
        },
        "TotalBananas": {
            "description": "Total number of bananas available",
            "shape": []
        },
        "MinSmallCrates": {
            "description": "Minimum number of small crates to be used",
            "shape": []
        },
        "LargeToSmallRatio": {
            "description": "Minimum multiple of small crates that large crates must be",
            "shape": []
        }
    },
    "variables": {
        "SmallCrates": {
            "description": "The number of small crates",
            "type": "continuous",
            "shape": []
        },
        "LargeCrates": {
            "description": "The number of large crates",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of large crates must be at least LargeToSmallRatio times the number of small crates.",
            "formulation": "LargeCrates \\geq LargeToSmallRatio \\times SmallCrates",
            "code": {
                "gurobipy": "model.addConstr(LargeCrates >= LargeToSmallRatio * SmallCrates)"
            }
        },
        {
            "description": "At least MinSmallCrates should be used.",
            "formulation": "SmallCrates \\geq MinSmallCrates",
            "code": {
                "gurobipy": "model.addConstr(SmallCrates >= MinSmallCrates)"
            }
        },
        {
            "description": "The total number of bananas used by small and large crates cannot exceed TotalBananas.",
            "formulation": "CapacitySmallCrate \\times SmallCrates + CapacityLargeCrate \\times LargeCrates \\leq TotalBananas",
            "code": {
                "gurobipy": "model.addConstr(CapacitySmallCrate * SmallCrates + CapacityLargeCrate * LargeCrates <= TotalBananas)"
            }
        }
    ],
    "objective": {
        "description": "The total number of crates produced is the sum of small and large crates. The objective is to maximize the total number of crates produced.",
        "formulation": "Max \\ SmallCrates + LargeCrates",
        "code": {
            "gurobipy": "model.setObjective(SmallCrates + LargeCrates, GRB.MAXIMIZE)"
        }
    }
}