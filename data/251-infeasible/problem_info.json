{
    "parametrized_description": "A taxi company selects quantities of NumVehicleTypes different vehicle types to maximize the total Earnings per shift, subject to the total Pollution being below PollutionCap, the total TransportCapacity being at least MinTransportCapacity, and each vehicle type not exceeding its MaxVehiclePercentage of the total number of vehicles.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumVehicleTypes": {
            "description": "Number of different vehicle types.",
            "shape": []
        },
        "TransportCapacity": {
            "description": "The number of people each vehicle type can transport per shift.",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "Pollution": {
            "description": "The units of pollution each vehicle type produces per shift.",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "Earnings": {
            "description": "The earnings the company makes per shift from each vehicle type.",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "MaxVehiclePercentage": {
            "description": "The maximum proportion of the total number of vehicles that can be of each vehicle type.",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "PollutionCap": {
            "description": "The maximum total units of pollution allowed per shift.",
            "shape": []
        },
        "MinTransportCapacity": {
            "description": "The minimum number of people that need to be transported per shift.",
            "shape": []
        }
    },
    "variables": {
        "NumVehicles": {
            "description": "The number of vehicles of each type used per shift",
            "type": "continuous",
            "shape": [
                "NumVehicleTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total Pollution is below PollutionCap.",
            "formulation": "\\sum_{i=1}^{NumVehicleTypes} Pollution_{i} \\cdot NumVehicles_{i} \\leq PollutionCap",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Pollution[i] * NumVehicles[i] for i in range(NumVehicleTypes)) <= PollutionCap)"
            }
        },
        {
            "description": "The total TransportCapacity is at least MinTransportCapacity.",
            "formulation": "\\sum_{i=1}^{NumVehicleTypes} NumVehicles_i \\times TransportCapacity_i \\geq MinTransportCapacity",
            "code": {
                "gurobipy": "model.addConstr(quicksum(NumVehicles[i] * TransportCapacity[i] for i in range(NumVehicleTypes)) >= MinTransportCapacity)"
            }
        },
        {
            "description": "Each vehicle type does not exceed its MaxVehiclePercentage of the total number of vehicles.",
            "formulation": "NumVehicles_i \\leq MaxVehiclePercentage_i \\cdot \\sum_{j=1}^{NumVehicleTypes} NumVehicles_j, \\quad \\forall i \\in \\{1, \\dots, NumVehicleTypes\\}",
            "code": {
                "gurobipy": "model.addConstrs(NumVehicles[i] <= MaxVehiclePercentage[i] * quicksum(NumVehicles[j] for j in range(NumVehicleTypes)) for i in range(NumVehicleTypes))"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total Earnings per shift.",
        "formulation": "Max \\sum_{t=1}^{\\text{NumVehicleTypes}} \\text{Earnings}_t \\times \\text{NumVehicles}_t",
        "code": {
            "gurobipy": "model.setObjective(quicksum(Earnings[t] * NumVehicles[t] for t in range(NumVehicleTypes)), GRB.MAXIMIZE)"
        }
    }
}