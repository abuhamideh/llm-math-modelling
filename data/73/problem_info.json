{
    "parametrized_description": "An airport buys NumVehicleTypes types of vehicles. Each vehicle type can move LuggageCapacity luggage per day and produces PollutantPerVehicleType units of pollutant per day. The airport needs to move at least MinLuggageRequired luggage per day and can produce at most MaxPollutantAllowed units of pollutant per day. Determine the number of each vehicle type to minimize the total number of vehicles needed.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumVehicleTypes": {
            "description": "Number of vehicle types",
            "shape": []
        },
        "MinLuggageRequired": {
            "description": "Minimum number of luggage to move per day",
            "shape": []
        },
        "MaxPollutantAllowed": {
            "description": "Maximum pollutant allowed per day",
            "shape": []
        },
        "LuggageCapacity": {
            "description": "Luggage capacity per vehicle type per day",
            "shape": [
                "NumVehicleTypes"
            ]
        },
        "PollutantPerVehicleType": {
            "description": "Pollutant produced per vehicle type per day",
            "shape": [
                "NumVehicleTypes"
            ]
        }
    },
    "variables": {
        "NumberOfVehicles": {
            "description": "The number of vehicles of each type used per day",
            "type": "continuous",
            "shape": [
                "NumVehicleTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "Each vehicle type can move LuggageCapacity luggage per day. The airport needs to move at least MinLuggageRequired luggage per day.",
            "formulation": "\\sum_{i=1}^{NumVehicleTypes} LuggageCapacity_i \\cdot NumberOfVehicles_i \\geq MinLuggageRequired",
            "code": {
                "gurobipy": "model.addConstr(quicksum(LuggageCapacity[i] * NumberOfVehicles[i] for i in range(NumVehicleTypes)) >= MinLuggageRequired)"
            }
        },
        {
            "description": "Each vehicle type produces PollutantPerVehicleType units of pollutant per day. The airport can produce at most MaxPollutantAllowed units of pollutant per day.",
            "formulation": "\\sum_{t=1}^{NumVehicleTypes} PollutantPerVehicleType_t \\cdot NumberOfVehicles_t \\leq MaxPollutantAllowed",
            "code": {
                "gurobipy": "model.addConstr(quicksum(PollutantPerVehicleType[t] * NumberOfVehicles[t] for t in range(NumVehicleTypes)) <= MaxPollutantAllowed)"
            }
        }
    ],
    "objective": {
        "description": "The objective is to minimize the total number of vehicles needed.",
        "formulation": "Min \\sum_{i=1}^{NumVehicleTypes} NumberOfVehicles_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(NumberOfVehicles[i] for i in range(NumVehicleTypes)), GRB.MINIMIZE)"
        }
    }
}