{
    "parametrized_description": "The company selects the number of large and small cruise ship trips to minimize (PollutionLarge \u00d7 LargeTrips + PollutionSmall \u00d7 SmallTrips) subject to LargeTrips \u2264 MaxLargeTrips, SmallTrips \u2265 MinSmallTripsPercentage \u00d7 (LargeTrips + SmallTrips), and (CapacityLarge \u00d7 LargeTrips + CapacitySmall \u00d7 SmallTrips) \u2265 RequiredCustomers.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CapacityLarge": {
            "description": "Capacity of a large cruise ship in number of customers",
            "shape": []
        },
        "CapacitySmall": {
            "description": "Capacity of a small cruise ship in number of customers",
            "shape": []
        },
        "PollutionLarge": {
            "description": "Pollution produced by a large cruise ship trip",
            "shape": []
        },
        "PollutionSmall": {
            "description": "Pollution produced by a small cruise ship trip",
            "shape": []
        },
        "MaxLargeTrips": {
            "description": "Maximum number of large cruise ship trips",
            "shape": []
        },
        "MinSmallTripsPercentage": {
            "description": "Minimum proportion of total trips made by small cruise ships",
            "shape": []
        },
        "RequiredCustomers": {
            "description": "Required number of customers to transport",
            "shape": []
        }
    },
    "variables": {
        "NumberLargeTrips": {
            "description": "The number of large cruise ship trips",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumberSmallTrips": {
            "description": "The number of small cruise ship trips",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The number of large trips must not exceed MaxLargeTrips.",
            "formulation": "NumberLargeTrips \\leq MaxLargeTrips",
            "code": {
                "gurobipy": "model.addConstr(NumberLargeTrips <= MaxLargeTrips)"
            }
        },
        {
            "description": "The number of small trips must be at least MinSmallTripsPercentage times the total number of trips (LargeTrips + SmallTrips).",
            "formulation": "NumberSmallTrips \\geq MinSmallTripsPercentage \\times (NumberLargeTrips + NumberSmallTrips)",
            "code": {
                "gurobipy": "model.addConstr(NumberSmallTrips >= MinSmallTripsPercentage * (NumberLargeTrips + NumberSmallTrips))"
            }
        },
        {
            "description": "The combined capacity of large and small trips must be at least RequiredCustomers (CapacityLarge \u00d7 LargeTrips + CapacitySmall \u00d7 SmallTrips \u2265 RequiredCustomers).",
            "formulation": "CapacityLarge \\times NumberLargeTrips + CapacitySmall \\times NumberSmallTrips \\geq RequiredCustomers",
            "code": {
                "gurobipy": "model.addConstr(CapacityLarge * NumberLargeTrips + CapacitySmall * NumberSmallTrips >= RequiredCustomers)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total pollution, calculated as PollutionLarge \u00d7 LargeTrips + PollutionSmall \u00d7 SmallTrips.",
        "formulation": "Min PollutionLarge \\times NumberLargeTrips + PollutionSmall \\times NumberSmallTrips",
        "code": {
            "gurobipy": "model.setObjective(PollutionLarge * NumberLargeTrips + PollutionSmall * NumberSmallTrips, GRB.MINIMIZE)"
        }
    }
}