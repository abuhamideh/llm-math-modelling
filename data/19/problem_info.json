{
    "parametrized_description": "A candy store prepares NumMixes different candy mixes using NumCandyTypes different types of candy. Each kilogram of each mix requires specific amounts of each candy type as defined by CompositionRequired. The profit per kilogram of each mix is given by ProfitPerMix. The store has AvailableCandy kilograms of each candy type available. Determine the quantities of each mix to produce to maximize total profit.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumMixes": {
            "description": "Number of different candy mixes prepared",
            "shape": []
        },
        "NumCandyTypes": {
            "description": "Number of different candy types used",
            "shape": []
        },
        "CompositionRequired": {
            "description": "Amount of each candy type required per kilogram of each mix",
            "shape": [
                "NumCandyTypes",
                "NumMixes"
            ]
        },
        "ProfitPerMix": {
            "description": "Profit per kilogram of each mix",
            "shape": [
                "NumMixes"
            ]
        },
        "AvailableCandy": {
            "description": "Amount of each candy type available",
            "shape": [
                "NumCandyTypes"
            ]
        }
    },
    "variables": {
        "ProductionMix": {
            "description": "The quantity of each mix produced (in kilograms)",
            "type": "continuous",
            "shape": [
                "NumMixes"
            ]
        }
    },
    "constraints": [
        {
            "description": "Each kilogram of each mix requires specific amounts of each candy type as defined by CompositionRequired.",
            "formulation": "\\sum_{i=1}^{NumMixes} CompositionRequired_{j,i} \\times ProductionMix_i \\leq AvailableCandy_j \\quad \\forall j = 1, \\dots, NumCandyTypes",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(CompositionRequired[j][i] * ProductionMix[i] for i in range(NumMixes)) <= AvailableCandy[j] for j in range(NumCandyTypes)), name=\"CandySupply\")"
            }
        },
        {
            "description": "The total usage of each candy type across all mixes cannot exceed the available amount AvailableCandy.",
            "formulation": "\\sum_{m=1}^{\\text{NumMixes}} \\text{CompositionRequired}_{c,m} \\times \\text{ProductionMix}_{m} \\leq \\text{AvailableCandy}_{c} \\quad \\forall c = 1, \\dots, \\text{NumCandyTypes}",
            "code": {
                "gurobipy": "model.addConstrs((quicksum(CompositionRequired[c, m] * ProductionMix[m] for m in range(NumMixes)) <= AvailableCandy[c] for c in range(NumCandyTypes)), name=\"CandyUsage\")"
            }
        }
    ],
    "objective": {
        "description": "Total profit is the sum of the profit per kilogram of each mix multiplied by the quantities produced. The objective is to maximize the total profit.",
        "formulation": "Max \\sum_{i=1}^{NumMixes} ProfitPerMix_i \\cdot ProductionMix_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ProductionMix[i] * ProfitPerMix[i] for i in range(NumMixes)), GRB.MAXIMIZE)"
        }
    }
}