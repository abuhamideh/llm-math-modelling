{
    "parametrized_description": "A water company sells glass and plastic bottles. Each glass bottle can hold GlassBottleCapacity milliliters of water while each plastic bottle can hold PlasticBottleCapacity milliliters of water. The number of plastic bottles must be at least MinPlasticRatio times the number of glass bottles. There must be at least MinGlassBottles glass bottles. The company has TotalWater milliliters of water available. Determine the number of each type of bottle to maximize the total number of bottles.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "GlassBottleCapacity": {
            "description": "The capacity of a glass bottle in milliliters",
            "shape": []
        },
        "PlasticBottleCapacity": {
            "description": "The capacity of a plastic bottle in milliliters",
            "shape": []
        },
        "MinPlasticRatio": {
            "description": "The minimum ratio of plastic bottles to glass bottles",
            "shape": []
        },
        "MinGlassBottles": {
            "description": "The minimum number of glass bottles required",
            "shape": []
        },
        "TotalWater": {
            "description": "Total volume of water available in milliliters",
            "shape": []
        }
    },
    "variables": {
        "PlasticBottles": {
            "description": "The number of plastic bottles",
            "type": "continuous",
            "shape": []
        },
        "GlassBottles": {
            "description": "The number of glass bottles",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of plastic bottles must be at least MinPlasticRatio times the number of glass bottles.",
            "formulation": "PlasticBottles \\geq MinPlasticRatio \\times GlassBottles",
            "code": {
                "gurobipy": "model.addConstr(PlasticBottles >= MinPlasticRatio * GlassBottles)"
            }
        },
        {
            "description": "There must be at least MinGlassBottles glass bottles.",
            "formulation": "GlassBottles \\geq MinGlassBottles",
            "code": {
                "gurobipy": "model.addConstr(GlassBottles >= MinGlassBottles)"
            }
        },
        {
            "description": "The total volume of water used by the glass and plastic bottles must not exceed TotalWater milliliters.",
            "formulation": "GlassBottles \\times GlassBottleCapacity + PlasticBottles \\times PlasticBottleCapacity \\leq TotalWater",
            "code": {
                "gurobipy": "model.addConstr(GlassBottles * GlassBottleCapacity + PlasticBottles * PlasticBottleCapacity <= TotalWater)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of bottles, which is the sum of the number of glass bottles and plastic bottles.",
        "formulation": "Max \\left( PlasticBottles + GlassBottles \\right)",
        "code": {
            "gurobipy": "model.setObjective(PlasticBottles + GlassBottles, GRB.MAXIMIZE)"
        }
    }
}