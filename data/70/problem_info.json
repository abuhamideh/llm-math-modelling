{
    "parametrized_description": "A fire department employs NumFireFighterTypes different fire fighter types. Each fire fighter type works HoursPerShift hours per shift and incurs CostPerShift cost per shift. The fire department needs at least TotalHoursRequired fire fighter hours and has a budget of Budget. The objective is to minimize the total number of fire fighters.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumFireFighterTypes": {
            "description": "Number of fire fighter types",
            "shape": []
        },
        "HoursPerShift": {
            "description": "Amount of hours each fire fighter type works per shift",
            "shape": [
                "NumFireFighterTypes"
            ]
        },
        "CostPerShift": {
            "description": "Cost of each fire fighter type per shift",
            "shape": [
                "NumFireFighterTypes"
            ]
        },
        "TotalHoursRequired": {
            "description": "Total required fire fighter hours",
            "shape": []
        },
        "Budget": {
            "description": "Total available budget",
            "shape": []
        }
    },
    "variables": {
        "ShiftsPerType": {
            "description": "The number of shifts for each fire fighter type",
            "type": "continuous",
            "shape": [
                "NumFireFighterTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The fire department needs at least TotalHoursRequired fire fighter hours.",
            "formulation": "\\sum_{i=1}^{\\text{NumFireFighterTypes}} \\text{HoursPerShift}_i \\text{ShiftsPerType}_i \\geq \\text{TotalHoursRequired}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(HoursPerShift[i] * ShiftsPerType[i] for i in range(NumFireFighterTypes)) >= TotalHoursRequired)"
            }
        },
        {
            "description": "The fire department has a budget of Budget.",
            "formulation": "\\sum_{t=1}^{NumFireFighterTypes} ShiftsPerType_t \\times CostPerShift_t \\leq Budget",
            "code": {
                "gurobipy": "model.addConstr(quicksum(ShiftsPerType[t] * CostPerShift[t] for t in range(NumFireFighterTypes)) <= Budget)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of fire fighters.",
        "formulation": "Min \\sum_{t=1}^{\\text{NumFireFighterTypes}} \\text{ShiftsPerType}_{t}",
        "code": {
            "gurobipy": "model.setObjective(quicksum(ShiftsPerType[t] for t in range(NumFireFighterTypes)), GRB.MINIMIZE)"
        }
    }
}