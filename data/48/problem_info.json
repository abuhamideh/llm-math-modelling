{
    "parametrized_description": "A honey farmer sells his honey in glass and plastic jars. A glass jar can hold GlassJarCapacity of honey while a plastic jar can hold PlasticJarCapacity of honey. Since glass jars are more expensive, at least MinPlasticToGlassRatio as many plastic jars must be filled as glass jars. However, at least MinNumberGlassJars glass jars should be filled. If the farmer has TotalHoney of honey, how many jars of each should be filled to maximize the total number of bottles filled?",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "GlassJarCapacity": {
            "description": "The capacity of a glass jar in milliliters",
            "shape": []
        },
        "PlasticJarCapacity": {
            "description": "The capacity of a plastic jar in milliliters",
            "shape": []
        },
        "MinPlasticToGlassRatio": {
            "description": "The minimum ratio of plastic jars to glass jars that must be filled",
            "shape": []
        },
        "MinNumberGlassJars": {
            "description": "The minimum number of glass jars that must be filled",
            "shape": []
        },
        "TotalHoney": {
            "description": "Total amount of honey available in milliliters",
            "shape": []
        }
    },
    "variables": {
        "GlassJarsFilled": {
            "description": "The number of glass jars that are filled",
            "type": "continuous",
            "shape": []
        },
        "PlasticJarsFilled": {
            "description": "The number of plastic jars filled",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "At least MinNumberGlassJars glass jars must be filled.",
            "formulation": "GlassJarsFilled \\geq MinNumberGlassJars",
            "code": {
                "gurobipy": "model.addConstr(GlassJarsFilled >= MinNumberGlassJars)"
            }
        },
        {
            "description": "The number of plastic jars filled must be at least MinPlasticToGlassRatio times the number of glass jars filled.",
            "formulation": "PlasticJarsFilled \\geq MinPlasticToGlassRatio \\times GlassJarsFilled",
            "code": {
                "gurobipy": "model.addConstr(PlasticJarsFilled >= MinPlasticToGlassRatio * GlassJarsFilled)"
            }
        },
        {
            "description": "The total amount of honey used by the filled jars cannot exceed TotalHoney.",
            "formulation": "GlassJarsFilled \\times GlassJarCapacity + PlasticJarsFilled \\times PlasticJarCapacity \\leq TotalHoney",
            "code": {
                "gurobipy": "model.addConstr(GlassJarCapacity * GlassJarsFilled + PlasticJarCapacity * PlasticJarsFilled <= TotalHoney)"
            }
        }
    ],
    "objective": {
        "description": "The total number of jars filled is the sum of glass jars and plastic jars. The objective is to maximize the total number of jars filled.",
        "formulation": "Max \\ GlassJarsFilled + PlasticJarsFilled",
        "code": {
            "gurobipy": "model.setObjective(GlassJarsFilled + PlasticJarsFilled, GRB.MAXIMIZE)"
        }
    }
}