{
    "parametrized_description": "A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash WashRateTopLoading items per day while the front-loading model can wash WashRateFrontLoading items per day. The top-loading model consumes EnergyConsumptionTopLoading kWh per day while the front-loading model consumes EnergyConsumptionFrontLoading kWh per day. The laundromat must be able to wash at least MinItemsPerDay items per day and has available MaxEnergyPerDay kWh per day. Since the top-loading machines are harder to use, at most MaxFractionTopLoading of the machines can be top-loading. Further, at least MinNumFrontLoading machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "WashRateTopLoading": {
            "description": "Number of items washed per day by a top-loading machine",
            "shape": []
        },
        "WashRateFrontLoading": {
            "description": "Number of items washed per day by a front-loading machine",
            "shape": []
        },
        "EnergyConsumptionTopLoading": {
            "description": "Energy consumed per day by a top-loading machine (kWh)",
            "shape": []
        },
        "EnergyConsumptionFrontLoading": {
            "description": "Energy consumed per day by a front-loading machine (kWh)",
            "shape": []
        },
        "MinItemsPerDay": {
            "description": "Minimum number of items to wash per day",
            "shape": []
        },
        "MaxEnergyPerDay": {
            "description": "Maximum available energy per day (kWh)",
            "shape": []
        },
        "MaxFractionTopLoading": {
            "description": "Maximum fraction of machines that can be top-loading",
            "shape": []
        },
        "MinNumFrontLoading": {
            "description": "Minimum number of front-loading machines",
            "shape": []
        }
    },
    "variables": {
        "NumTopLoading": {
            "description": "The number of top-loading machines",
            "type": "continuous",
            "shape": []
        },
        "NumFrontLoading": {
            "description": "The number of front-loading machines",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "A top-loading machine washes WashRateTopLoading items per day and a front-loading machine washes WashRateFrontLoading items per day. The total number of items washed per day must be at least MinItemsPerDay.",
            "formulation": "WashRateTopLoading \\cdot NumTopLoading + WashRateFrontLoading \\cdot NumFrontLoading \\geq MinItemsPerDay",
            "code": {
                "gurobipy": "model.addConstr(WashRateTopLoading * NumTopLoading + WashRateFrontLoading * NumFrontLoading >= MinItemsPerDay)"
            }
        },
        {
            "description": "A top-loading machine consumes EnergyConsumptionTopLoading kWh per day and a front-loading machine consumes EnergyConsumptionFrontLoading kWh per day. The total energy consumption per day cannot exceed MaxEnergyPerDay kWh.",
            "formulation": "NumTopLoading \\times EnergyConsumptionTopLoading + NumFrontLoading \\times EnergyConsumptionFrontLoading \\leq MaxEnergyPerDay",
            "code": {
                "gurobipy": "model.addConstr(EnergyConsumptionTopLoading * NumTopLoading + EnergyConsumptionFrontLoading * NumFrontLoading <= MaxEnergyPerDay)"
            }
        },
        {
            "description": "At most MaxFractionTopLoading fraction of the total machines can be top-loading.",
            "formulation": "NumTopLoading \\leq MaxFractionTopLoading \\times (NumTopLoading + NumFrontLoading)",
            "code": {
                "gurobipy": "model.addConstr(NumTopLoading <= MaxFractionTopLoading * (NumTopLoading + NumFrontLoading))"
            }
        },
        {
            "description": "At least MinNumFrontLoading machines must be front-loading.",
            "formulation": "NumFrontLoading \\geq MinNumFrontLoading",
            "code": {
                "gurobipy": "model.addConstr(NumFrontLoading >= MinNumFrontLoading)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of washing machines purchased.",
        "formulation": "Min \\ NumTopLoading + NumFrontLoading",
        "code": {
            "gurobipy": "model.setObjective(NumTopLoading + NumFrontLoading, GRB.MINIMIZE)"
        }
    }
}