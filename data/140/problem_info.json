{
    "parametrized_description": "A bee farmer transports his honey in small and large bottles, where a small bottle has a capacity of SmallBottleCapacity units of honey and a large bottle has a capacity of LargeBottleCapacity units of honey. The farmer has available at most MaxSmallBottles small bottles and at most MaxLargeBottles large bottles. Additionally, the number of small bottles used must be at least MinRatioSmallToLarge times the number of large bottles used. The total number of bottles transported must not exceed MaxTotalBottles, and at least MinLargeBottles large bottles must be used. The farmer aims to maximize the total amount of honey transported.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallBottleCapacity": {
            "description": "Capacity of a small bottle in units of honey",
            "shape": []
        },
        "LargeBottleCapacity": {
            "description": "Capacity of a large bottle in units of honey",
            "shape": []
        },
        "MaxSmallBottles": {
            "description": "Maximum number of small bottles available",
            "shape": []
        },
        "MaxLargeBottles": {
            "description": "Maximum number of large bottles available",
            "shape": []
        },
        "MinRatioSmallToLarge": {
            "description": "Minimum ratio of small bottles to large bottles",
            "shape": []
        },
        "MaxTotalBottles": {
            "description": "Maximum total number of bottles that can be transported",
            "shape": []
        },
        "MinLargeBottles": {
            "description": "Minimum number of large bottles that must be used",
            "shape": []
        }
    },
    "variables": {
        "SmallBottlesUsed": {
            "description": "The number of small bottles used",
            "type": "continuous",
            "shape": []
        },
        "LargeBottlesUsed": {
            "description": "The number of large bottles used",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of small bottles used must be at least MinRatioSmallToLarge times the number of large bottles used.",
            "formulation": "SmallBottlesUsed \\geq MinRatioSmallToLarge \\cdot LargeBottlesUsed",
            "code": {
                "gurobipy": "model.addConstr(SmallBottlesUsed >= MinRatioSmallToLarge * LargeBottlesUsed)"
            }
        },
        {
            "description": "The total number of bottles transported must not exceed MaxTotalBottles.",
            "formulation": "SmallBottlesUsed + LargeBottlesUsed \\leq MaxTotalBottles",
            "code": {
                "gurobipy": "model.addConstr(SmallBottlesUsed + LargeBottlesUsed <= MaxTotalBottles)"
            }
        },
        {
            "description": "At least MinLargeBottles large bottles must be used.",
            "formulation": "LargeBottlesUsed \\geq MinLargeBottles",
            "code": {
                "gurobipy": "model.addConstr(LargeBottlesUsed >= MinLargeBottles)"
            }
        },
        {
            "description": "The number of small bottles used must not exceed MaxSmallBottles.",
            "formulation": "SmallBottlesUsed \\leq MaxSmallBottles",
            "code": {
                "gurobipy": "model.addConstr(SmallBottlesUsed <= MaxSmallBottles)"
            }
        },
        {
            "description": "The number of large bottles used must not exceed MaxLargeBottles.",
            "formulation": "LargeBottlesUsed \\leq MaxLargeBottles",
            "code": {
                "gurobipy": "model.addConstr(LargeBottlesUsed <= MaxLargeBottles)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total amount of honey transported, which is the sum of (SmallBottleCapacity \u00d7 number of small bottles) and (LargeBottleCapacity \u00d7 number of large bottles).",
        "formulation": "Max \\ SmallBottleCapacity \\times SmallBottlesUsed + LargeBottleCapacity \\times LargeBottlesUsed",
        "code": {
            "gurobipy": "model.setObjective(SmallBottleCapacity * SmallBottlesUsed + LargeBottleCapacity * LargeBottlesUsed, GRB.MAXIMIZE)"
        }
    }
}