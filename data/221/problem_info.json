{
    "parametrized_description": "An amusement park operates throwing and climbing games. Each throwing game attracts CustomersPerThrowingGame customers per hour and incurs a PrizeCostPerThrowingGame cost per hour. Each climbing game attracts CustomersPerClimbingGame customers per hour and incurs a PrizeCostPerClimbingGame cost per hour. The number of throwing games must be at least MinRatioThrowingClimbing times the number of climbing games. At least MinClimbingGames climbing games must be operated. The total prize cost per hour must not exceed MaxPrizeCostPerHour. The objective is to maximize the total number of customers attracted per hour.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CustomersPerThrowingGame": {
            "description": "Number of customers attracted per hour by throwing games",
            "shape": []
        },
        "CustomersPerClimbingGame": {
            "description": "Number of customers attracted per hour by climbing games",
            "shape": []
        },
        "PrizeCostPerThrowingGame": {
            "description": "Cost in prizes per hour for throwing games",
            "shape": []
        },
        "PrizeCostPerClimbingGame": {
            "description": "Cost in prizes per hour for climbing games",
            "shape": []
        },
        "MinRatioThrowingClimbing": {
            "description": "Minimum ratio of throwing games to climbing games",
            "shape": []
        },
        "MinClimbingGames": {
            "description": "Minimum number of climbing games required",
            "shape": []
        },
        "MaxPrizeCostPerHour": {
            "description": "Maximum total prize cost per hour",
            "shape": []
        }
    },
    "variables": {
        "ThrowingGames": {
            "description": "The number of throwing games",
            "type": "continuous",
            "shape": []
        },
        "ClimbingGames": {
            "description": "The number of climbing games",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of throwing games must be at least MinRatioThrowingClimbing times the number of climbing games.",
            "formulation": "ThrowingGames \\geq MinRatioThrowingClimbing \\times ClimbingGames",
            "code": {
                "gurobipy": "model.addConstr(ThrowingGames >= MinRatioThrowingClimbing * ClimbingGames)"
            }
        },
        {
            "description": "At least MinClimbingGames climbing games must be operated.",
            "formulation": "ClimbingGames \\geq MinClimbingGames",
            "code": {
                "gurobipy": "model.addConstr(ClimbingGames >= MinClimbingGames)"
            }
        },
        {
            "description": "The total prize cost per hour must not exceed MaxPrizeCostPerHour.",
            "formulation": "PrizeCostPerThrowingGame \\times ThrowingGames + PrizeCostPerClimbingGame \\times ClimbingGames \\leq MaxPrizeCostPerHour",
            "code": {
                "gurobipy": "model.addConstr(PrizeCostPerThrowingGame * ThrowingGames + PrizeCostPerClimbingGame * ClimbingGames <= MaxPrizeCostPerHour)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total number of customers attracted per hour, which is the sum of CustomersPerThrowingGame multiplied by the number of throwing games and CustomersPerClimbingGame multiplied by the number of climbing games.",
        "formulation": "Max CustomersPerThrowingGame \\times ThrowingGames + CustomersPerClimbingGame \\times ClimbingGames",
        "code": {
            "gurobipy": "model.setObjective(CustomersPerThrowingGame * ThrowingGames + CustomersPerClimbingGame * ClimbingGames, GRB.MAXIMIZE)"
        }
    }
}