{
    "parametrized_description": "A company produces two types of containers: cans and glass bottles. Each can holds CapacityCan milliliters and each glass bottle holds CapacityBottle milliliters. The company must bottle at least MinimumTotalVolume milliliters per day. The number of cans produced must be at least RatioCansToBottles times the number of glass bottles produced. Additionally, at least MinimumGlassBottles glass bottles must be produced each day. The objective is to maximize the total number of containers produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CapacityCan": {
            "description": "The amount of soda that one can container holds, in milliliters.",
            "shape": []
        },
        "CapacityBottle": {
            "description": "The amount of soda that one glass bottle container holds, in milliliters.",
            "shape": []
        },
        "MinimumTotalVolume": {
            "description": "The minimum total volume of soda that needs to be bottled each day, in milliliters.",
            "shape": []
        },
        "RatioCansToBottles": {
            "description": "The minimum ratio of number of cans to number of glass bottles.",
            "shape": []
        },
        "MinimumGlassBottles": {
            "description": "The minimum number of glass bottles that must be produced.",
            "shape": []
        }
    },
    "variables": {
        "NumberOfBottles": {
            "description": "The number of glass bottle containers to produce",
            "type": "continuous",
            "shape": []
        },
        "NumberOfCans": {
            "description": "The number of cans to produce",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total volume bottled per day must be at least MinimumTotalVolume milliliters.",
            "formulation": "CapacityBottle \\times NumberOfBottles \\geq MinimumTotalVolume",
            "code": {
                "gurobipy": "model.addConstr(CapacityBottle * NumberOfBottles >= MinimumTotalVolume)"
            }
        },
        {
            "description": "The number of cans produced must be at least RatioCansToBottles times the number of glass bottles produced.",
            "formulation": "NumberOfCans \\geq RatioCansToBottles \\times NumberOfBottles",
            "code": {
                "gurobipy": "model.addConstr(NumberOfCans >= RatioCansToBottles * NumberOfBottles)"
            }
        },
        {
            "description": "At least MinimumGlassBottles glass bottles must be produced each day.",
            "formulation": "NumberOfBottles \\geq MinimumGlassBottles",
            "code": {
                "gurobipy": "model.addConstr(NumberOfBottles >= MinimumGlassBottles)"
            }
        }
    ],
    "objective": {
        "description": "The total number of containers produced is the sum of the number of cans and the number of glass bottles. The objective is to maximize the total number of containers produced.",
        "formulation": "Max \\ NumberOfCans + NumberOfBottles",
        "code": {
            "gurobipy": "model.setObjective(NumberOfCans + NumberOfBottles, GRB.MAXIMIZE)"
        }
    }
}