{
    "parametrized_description": "You are designing an office space with NumDeskTypes different desk types. Each desk type has a Price, Space, and Seats. The total cost of the desks must not exceed MaxBudget, and the total space occupied by the desks must not exceed MaxSpace. The goal is to determine the number of each desk type to maximize the total seating availability.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "NumDeskTypes": {
            "description": "Number of desk types",
            "shape": []
        },
        "Price": {
            "description": "Cost of each desk type",
            "shape": [
                "NumDeskTypes"
            ]
        },
        "Space": {
            "description": "Space occupied by each desk type",
            "shape": [
                "NumDeskTypes"
            ]
        },
        "Seats": {
            "description": "Seating capacity of each desk type",
            "shape": [
                "NumDeskTypes"
            ]
        },
        "MaxBudget": {
            "description": "Maximum budget available",
            "shape": []
        },
        "MaxSpace": {
            "description": "Maximum office space for desks",
            "shape": []
        }
    },
    "variables": {
        "NumDesks": {
            "description": "The number of desks of each type",
            "type": "continuous",
            "shape": [
                "NumDeskTypes"
            ]
        }
    },
    "constraints": [
        {
            "description": "The total cost of the desks must not exceed MaxBudget.",
            "formulation": "\\sum_{i=1}^{NumDeskTypes} Price_i \\times NumDesks_i \\leq MaxBudget",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Price[i] * NumDesks[i] for i in range(NumDeskTypes)) <= MaxBudget)"
            }
        },
        {
            "description": "The total space occupied by the desks must not exceed MaxSpace.",
            "formulation": "\\sum_{i=1}^{\\text{NumDeskTypes}} \\text{Space}_i \\cdot \\text{NumDesks}_i \\leq \\text{MaxSpace}",
            "code": {
                "gurobipy": "model.addConstr(quicksum(Space[i] * NumDesks[i] for i in range(NumDeskTypes)) <= MaxSpace)"
            }
        }
    ],
    "objective": {
        "description": "The total seating availability is the sum of the seating capacity of each desk type multiplied by the number of that desk type. The objective is to maximize the total seating availability.",
        "formulation": "Max \\sum_{i=1}^{NumDeskTypes} \\text{Seats}_i \\times \\text{NumDesks}_i",
        "code": {
            "gurobipy": "model.setObjective(quicksum(Seats[i] * NumDesks[i] for i in range(NumDeskTypes)), GRB.MAXIMIZE)"
        }
    }
}