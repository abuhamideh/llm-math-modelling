{
    "parametrized_description": "A market owner wants to start a jam business. He can either sell sets of small packets or jugs. Each set of small packets has a capacity of SmallPacketCapacity milliliters and each jug has a capacity of JugCapacity milliliters. At least MinJugRatio times as many jugs must be used as sets of small packets. At least MinSmallPackets sets of small packets must be filled. The market owner has TotalJam milliliters of jam. The owner aims to maximize the total number of units sold to customers.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "SmallPacketCapacity": {
            "description": "Capacity of one set of small packets in milliliters",
            "shape": []
        },
        "JugCapacity": {
            "description": "Capacity of one jug in milliliters",
            "shape": []
        },
        "MinJugRatio": {
            "description": "Minimum ratio of jugs to sets of small packets",
            "shape": []
        },
        "MinSmallPackets": {
            "description": "Minimum number of sets of small packets to be filled",
            "shape": []
        },
        "TotalJam": {
            "description": "Total available milliliters of jam",
            "shape": []
        }
    },
    "variables": {
        "NumberOfSmallPacketSets": {
            "description": "The number of sets of small packets",
            "type": "continuous",
            "shape": []
        },
        "NumberOfJugs": {
            "description": "The number of jugs",
            "type": "continuous",
            "shape": []
        },
        "TotalJamUsedSmall": {
            "description": "The total milliliters of jam used by small packet sets",
            "type": "continuous",
            "shape": []
        },
        "TotalJamUsedJugs": {
            "description": "The total milliliters of jam used by jugs",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total jam used for small packets and jugs cannot exceed the total available jam (TotalJam).",
            "formulation": "NumberOfSmallPacketSets \\times SmallPacketCapacity + NumberOfJugs \\times JugCapacity \\leq TotalJam",
            "code": {
                "gurobipy": "model.addConstr(NumberOfSmallPacketSets * SmallPacketCapacity + NumberOfJugs * JugCapacity <= TotalJam)"
            }
        },
        {
            "description": "Each set of small packets sold uses SmallPacketCapacity milliliters of jam.",
            "formulation": "TotalJamUsedSmall = NumberOfSmallPacketSets \\times SmallPacketCapacity",
            "code": {
                "gurobipy": "model.addConstr(TotalJamUsedSmall == NumberOfSmallPacketSets * SmallPacketCapacity)"
            }
        },
        {
            "description": "Each jug sold uses JugCapacity milliliters of jam.",
            "formulation": "TotalJamUsedJugs = NumberOfJugs \\times JugCapacity",
            "code": {
                "gurobipy": "model.addConstr(TotalJamUsedJugs == JugCapacity * NumberOfJugs)"
            }
        },
        {
            "description": "The number of jugs sold must be at least MinJugRatio times the number of sets of small packets sold.",
            "formulation": "NumberOfJugs \\geq MinJugRatio \\times NumberOfSmallPacketSets",
            "code": {
                "gurobipy": "model.addConstr(NumberOfJugs >= MinJugRatio * NumberOfSmallPacketSets)"
            }
        },
        {
            "description": "At least MinSmallPackets sets of small packets must be filled.",
            "formulation": "NumberOfSmallPacketSets \\geq MinSmallPackets",
            "code": {
                "gurobipy": "model.addConstr(NumberOfSmallPacketSets >= MinSmallPackets)"
            }
        }
    ],
    "objective": {
        "description": "The objective is to maximize the total number of units sold to customers, where total units sold are the sum of sets of small packets and jugs sold.",
        "formulation": "Max \\left( NumberOfSmallPacketSets + NumberOfJugs \\right )",
        "code": {
            "gurobipy": "model.setObjective(NumberOfSmallPacketSets + NumberOfJugs, GRB.MAXIMIZE)"
        }
    }
}