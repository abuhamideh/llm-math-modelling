{
    "parametrized_description": "A bank can build small and large branches to serve their customers. A small branch can serve CustomersSmall customers per day and requires TellersSmall bank tellers. A large branch can serve CustomersLarge customers per day and requires TellersLarge bank tellers. The bank has available TotalTellers bank tellers and needs to be able to serve at least MinCustomers customers per day. They aim to minimize the total number of branches built.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CustomersSmall": {
            "description": "Number of customers a small branch can serve per day",
            "shape": []
        },
        "TellersSmall": {
            "description": "Number of tellers required by a small branch",
            "shape": []
        },
        "CustomersLarge": {
            "description": "Number of customers a large branch can serve per day",
            "shape": []
        },
        "TellersLarge": {
            "description": "Number of tellers required by a large branch",
            "shape": []
        },
        "TotalTellers": {
            "description": "Total number of available bank tellers",
            "shape": []
        },
        "MinCustomers": {
            "description": "Minimum number of customers that need to be served per day",
            "shape": []
        }
    },
    "variables": {
        "SmallBranches": {
            "description": "The number of small branches",
            "type": "continuous",
            "shape": []
        },
        "LargeBranches": {
            "description": "The number of large branches",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total number of tellers required by small and large branches cannot exceed the available tellers (SmallBranches * TellersSmall + LargeBranches * TellersLarge \u2264 TotalTellers).",
            "formulation": "SmallBranches \\times TellersSmall + LargeBranches \\times TellersLarge \\leq TotalTellers",
            "code": {
                "gurobipy": "model.addConstr(SmallBranches * TellersSmall + LargeBranches * TellersLarge <= TotalTellers)"
            }
        },
        {
            "description": "The total number of customers served by small and large branches must be at least the minimum required (SmallBranches * CustomersSmall + LargeBranches * CustomersLarge \u2265 MinCustomers).",
            "formulation": "SmallBranches \\times CustomersSmall + LargeBranches \\times CustomersLarge \\geq MinCustomers",
            "code": {
                "gurobipy": "model.addConstr(SmallBranches * CustomersSmall + LargeBranches * CustomersLarge >= MinCustomers)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of branches built (SmallBranches + LargeBranches).",
        "formulation": "Min \\ SmallBranches + LargeBranches",
        "code": {
            "gurobipy": "model.setObjective(SmallBranches + LargeBranches, GRB.MINIMIZE)"
        }
    }
}