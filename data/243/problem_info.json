{
    "parametrized_description": "A company distributes masks using small boxes and large boxes. Each small box holds MasksPerSmallBox masks, and each large box holds MasksPerLargeBox masks. The number of small boxes must be at least MinRatioSmallToLarge times the number of large boxes. At least MinLargeBoxes large boxes must be used. The total number of masks distributed must be at least TotalMasksRequired. The objective is to minimize the total number of boxes used.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "MasksPerSmallBox": {
            "description": "Number of masks that fit in a small box",
            "shape": []
        },
        "MasksPerLargeBox": {
            "description": "Number of masks that fit in a large box",
            "shape": []
        },
        "MinRatioSmallToLarge": {
            "description": "Minimum ratio of small boxes to large boxes",
            "shape": []
        },
        "MinLargeBoxes": {
            "description": "Minimum number of large boxes required",
            "shape": []
        },
        "TotalMasksRequired": {
            "description": "Minimum number of masks to distribute",
            "shape": []
        }
    },
    "variables": {
        "NumberSmallBoxes": {
            "description": "The number of small boxes",
            "type": "continuous",
            "shape": []
        },
        "NumberLargeBoxes": {
            "description": "The number of large boxes",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The number of small boxes must be at least MinRatioSmallToLarge times the number of large boxes.",
            "formulation": "NumberSmallBoxes \\geq MinRatioSmallToLarge \\times NumberLargeBoxes",
            "code": {
                "gurobipy": "model.addConstr(NumberSmallBoxes >= MinRatioSmallToLarge * NumberLargeBoxes)"
            }
        },
        {
            "description": "At least MinLargeBoxes large boxes must be used.",
            "formulation": "NumberLargeBoxes \\geq MinLargeBoxes",
            "code": {
                "gurobipy": "model.addConstr(NumberLargeBoxes >= MinLargeBoxes)"
            }
        },
        {
            "description": "The total number of masks distributed must be at least TotalMasksRequired.",
            "formulation": "MasksPerSmallBox \\times NumberSmallBoxes + MasksPerLargeBox \\times NumberLargeBoxes \\geq TotalMasksRequired",
            "code": {
                "gurobipy": "model.addConstr(MasksPerSmallBox * NumberSmallBoxes + MasksPerLargeBox * NumberLargeBoxes >= TotalMasksRequired)"
            }
        }
    ],
    "objective": {
        "description": "The total number of boxes used is the sum of small and large boxes. The objective is to minimize the total number of boxes used.",
        "formulation": "Min NumberSmallBoxes + NumberLargeBoxes",
        "code": {
            "gurobipy": "model.setObjective(NumberSmallBoxes + NumberLargeBoxes, GRB.MINIMIZE)"
        }
    }
}