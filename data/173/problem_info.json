{
    "parametrized_description": "A tourist spot provides two transportation options: hot-air balloons and gondola lifts. Each hot-air balloon carries VisitorsPerBalloon visitors and generates PollutionPerBalloon pollution units per ride, while each gondola lift carries VisitorsPerGondola visitors and generates PollutionPerGondola pollution units per ride. The number of hot-air balloon rides is limited to MaxBalloonRides, and a minimum of MinVisitors visitors must be transported. The objective is to minimize the total pollution produced.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "VisitorsPerBalloon": {
            "description": "Number of visitors that can be carried by one hot-air balloon",
            "shape": []
        },
        "VisitorsPerGondola": {
            "description": "Number of visitors that can be carried by one gondola lift",
            "shape": []
        },
        "PollutionPerBalloon": {
            "description": "Units of pollution produced by one hot-air balloon ride",
            "shape": []
        },
        "PollutionPerGondola": {
            "description": "Units of pollution produced by one gondola lift ride",
            "shape": []
        },
        "MaxBalloonRides": {
            "description": "Maximum number of hot-air balloon rides allowed",
            "shape": []
        },
        "MinVisitors": {
            "description": "Minimum number of visitors that need to be transported",
            "shape": []
        }
    },
    "variables": {
        "BalloonRides": {
            "description": "The number of hot-air balloon rides",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "GondolaLifts": {
            "description": "The number of gondola lift rides",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "The number of hot-air balloon rides cannot exceed MaxBalloonRides.",
            "formulation": "BalloonRides \\leq MaxBalloonRides",
            "code": {
                "gurobipy": "model.addConstr(BalloonRides <= MaxBalloonRides)"
            }
        },
        {
            "description": "A minimum of MinVisitors visitors must be transported using hot-air balloons and gondola lifts.",
            "formulation": "VisitorsPerBalloon \\times BalloonRides + VisitorsPerGondola \\times GondolaLifts \\geq MinVisitors",
            "code": {
                "gurobipy": "model.addConstr(VisitorsPerBalloon * BalloonRides + VisitorsPerGondola * GondolaLifts >= MinVisitors)"
            }
        }
    ],
    "objective": {
        "description": "The objective is to minimize the total pollution produced by the transportation options.",
        "formulation": "Min \\ PollutionPerBalloon \\cdot BalloonRides + PollutionPerGondola \\cdot GondolaLifts",
        "code": {
            "gurobipy": "model.setObjective(PollutionPerBalloon * BalloonRides + PollutionPerGondola * GondolaLifts, GRB.MINIMIZE)"
        }
    }
}