{
    "parametrized_description": "A theme park transports its visitors using scooters and rickshaws. Each scooter can carry ScooterCapacity people while each rickshaw can carry RickshawCapacity people. At most MaxRickshawPercentage of the vehicles used can be rickshaws. The park needs to transport at least NumVisitors visitors, and the objective is to minimize the total number of scooters used.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "ScooterCapacity": {
            "description": "Capacity of a scooter in number of people",
            "shape": []
        },
        "RickshawCapacity": {
            "description": "Capacity of a rickshaw in number of people",
            "shape": []
        },
        "MaxRickshawPercentage": {
            "description": "Maximum percentage of vehicles that can be rickshaws",
            "shape": []
        },
        "NumVisitors": {
            "description": "Number of visitors to transport",
            "shape": []
        }
    },
    "variables": {
        "NumScooters": {
            "description": "The number of scooters used to transport visitors",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        },
        "NumRickshaws": {
            "description": "The number of rickshaws used to transport visitors",
            "type": "continuous",
            "shape": [
                "Integer"
            ]
        }
    },
    "constraints": [
        {
            "description": "Each scooter can carry ScooterCapacity people and each rickshaw can carry RickshawCapacity people. The total number of people transported must be at least NumVisitors.",
            "formulation": "ScooterCapacity \\times NumScooters + RickshawCapacity \\times NumRickshaws \\geq NumVisitors",
            "code": {
                "gurobipy": "model.addConstr(ScooterCapacity * NumScooters + RickshawCapacity * NumRickshaws >= NumVisitors)"
            }
        },
        {
            "description": "The number of rickshaws used must not exceed MaxRickshawPercentage of the total number of vehicles used.",
            "formulation": "NumRickshaws \\leq MaxRickshawPercentage \\times (NumScooters + NumRickshaws)",
            "code": {
                "gurobipy": "model.addConstr((1 - MaxRickshawPercentage) * NumRickshaws <= MaxRickshawPercentage * NumScooters)"
            }
        }
    ],
    "objective": {
        "description": "Minimize the total number of scooters used.",
        "formulation": "Min\\ NumScooters",
        "code": {
            "gurobipy": "model.setObjective(NumScooters, GRB.MINIMIZE)"
        }
    }
}