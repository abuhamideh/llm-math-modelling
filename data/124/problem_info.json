{
    "parametrized_description": "Determine the number of cheesecake slices and caramel cake slices to maximize the total sugar consumed, where each cheesecake slice provides SugarCheesecake grams of sugar and each caramel cake slice provides SugarCaramelCake grams of sugar. Ensure that the total calories from cheesecake and caramel cake do not exceed MaxTotalCalories, that the number of cheesecake slices is at least MinCheesecakeToCaramelRatio times the number of caramel cake slices, and that the number of caramel cake slices is at least MinCaramelSlices.",
    "keywords": [
        "N.A."
    ],
    "parameters": {
        "CaloriesCheesecake": {
            "description": "Calories per slice of cheesecake",
            "shape": []
        },
        "SugarCheesecake": {
            "description": "Sugar per slice of cheesecake",
            "shape": []
        },
        "CaloriesCaramelCake": {
            "description": "Calories per slice of caramel cake",
            "shape": []
        },
        "SugarCaramelCake": {
            "description": "Sugar per slice of caramel cake",
            "shape": []
        },
        "MinCheesecakeToCaramelRatio": {
            "description": "Minimum ratio of cheesecake slices to caramel cake slices",
            "shape": []
        },
        "MinCaramelSlices": {
            "description": "Minimum number of caramel cake slices",
            "shape": []
        },
        "MaxTotalCalories": {
            "description": "Maximum total calories that can be consumed in one day",
            "shape": []
        }
    },
    "variables": {
        "CheesecakeSlices": {
            "description": "The number of slices of cheesecake",
            "type": "continuous",
            "shape": []
        },
        "CaramelCakeSlices": {
            "description": "The number of slices of caramel cake",
            "type": "continuous",
            "shape": []
        }
    },
    "constraints": [
        {
            "description": "The total calories from cheesecake and caramel cake do not exceed MaxTotalCalories",
            "formulation": "CheesecakeSlices \\times CaloriesCheesecake + CaramelCakeSlices \\times CaloriesCaramelCake \\leq MaxTotalCalories",
            "code": {
                "gurobipy": "model.addConstr(CheesecakeSlices * CaloriesCheesecake + CaramelCakeSlices * CaloriesCaramelCake <= MaxTotalCalories)"
            }
        },
        {
            "description": "The number of cheesecake slices is at least MinCheesecakeToCaramelRatio times the number of caramel cake slices",
            "formulation": "CheesecakeSlices \\geq MinCheesecakeToCaramelRatio \\times CaramelCakeSlices",
            "code": {
                "gurobipy": "model.addConstr(CheesecakeSlices >= MinCheesecakeToCaramelRatio * CaramelCakeSlices)"
            }
        },
        {
            "description": "The number of caramel cake slices is at least MinCaramelSlices",
            "formulation": "CaramelCakeSlices \\geq MinCaramelSlices",
            "code": {
                "gurobipy": "model.addConstr(CaramelCakeSlices >= MinCaramelSlices)"
            }
        }
    ],
    "objective": {
        "description": "Maximize the total sugar consumed, where each cheesecake slice provides SugarCheesecake grams of sugar and each caramel cake slice provides SugarCaramelCake grams of sugar",
        "formulation": "Max \\ SugarCheesecake \\cdot CheesecakeSlices + SugarCaramelCake \\cdot CaramelCakeSlices",
        "code": {
            "gurobipy": "model.setObjective(SugarCheesecake * CheesecakeSlices + SugarCaramelCake * CaramelCakeSlices, GRB.MAXIMIZE)"
        }
    }
}